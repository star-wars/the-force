#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use c4::Types;

# HELPER FUNCTIONS AND STRUCTURES

package c4::C4_InsertOrUpdate_args;
use base qw(Class::Accessor);
c4::C4_InsertOrUpdate_args->mk_accessors( qw( rowId columnId value ttl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{rowId} = undef;
  $self->{columnId} = undef;
  $self->{value} = undef;
  $self->{ttl} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{rowId}) {
      $self->{rowId} = $vals->{rowId};
    }
    if (defined $vals->{columnId}) {
      $self->{columnId} = $vals->{columnId};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
    if (defined $vals->{ttl}) {
      $self->{ttl} = $vals->{ttl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_InsertOrUpdate_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{rowId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I16) {
        $xfer += $input->readI16(\$self->{columnId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{ttl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_InsertOrUpdate_args');
  if (defined $self->{rowId}) {
    $xfer += $output->writeFieldBegin('rowId', TType::I64, 1);
    $xfer += $output->writeI64($self->{rowId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnId}) {
    $xfer += $output->writeFieldBegin('columnId', TType::I16, 2);
    $xfer += $output->writeI16($self->{columnId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::STRING, 3);
    $xfer += $output->writeString($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ttl}) {
    $xfer += $output->writeFieldBegin('ttl', TType::I32, 4);
    $xfer += $output->writeI32($self->{ttl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_InsertOrUpdate_result;
use base qw(Class::Accessor);
c4::C4_InsertOrUpdate_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{ire} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{ire}) {
      $self->{ire} = $vals->{ire};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_InsertOrUpdate_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{ire} = new c4::InvalidRequestException();
        $xfer += $self->{ire}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_InsertOrUpdate_result');
  if (defined $self->{ire}) {
    $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
    $xfer += $self->{ire}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_Get_args;
use base qw(Class::Accessor);
c4::C4_Get_args->mk_accessors( qw( rowId columnId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{rowId} = undef;
  $self->{columnId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{rowId}) {
      $self->{rowId} = $vals->{rowId};
    }
    if (defined $vals->{columnId}) {
      $self->{columnId} = $vals->{columnId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_Get_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{rowId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I16) {
        $xfer += $input->readI16(\$self->{columnId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_Get_args');
  if (defined $self->{rowId}) {
    $xfer += $output->writeFieldBegin('rowId', TType::I64, 1);
    $xfer += $output->writeI64($self->{rowId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnId}) {
    $xfer += $output->writeFieldBegin('columnId', TType::I16, 2);
    $xfer += $output->writeI16($self->{columnId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_Get_result;
use base qw(Class::Accessor);
c4::C4_Get_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{ire} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{ire}) {
      $self->{ire} = $vals->{ire};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_Get_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{ire} = new c4::InvalidRequestException();
        $xfer += $self->{ire}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_Get_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ire}) {
    $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
    $xfer += $self->{ire}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_TombstoneColumn_args;
use base qw(Class::Accessor);
c4::C4_TombstoneColumn_args->mk_accessors( qw( rowId columnId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{rowId} = undef;
  $self->{columnId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{rowId}) {
      $self->{rowId} = $vals->{rowId};
    }
    if (defined $vals->{columnId}) {
      $self->{columnId} = $vals->{columnId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_TombstoneColumn_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{rowId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I16) {
        $xfer += $input->readI16(\$self->{columnId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_TombstoneColumn_args');
  if (defined $self->{rowId}) {
    $xfer += $output->writeFieldBegin('rowId', TType::I64, 1);
    $xfer += $output->writeI64($self->{rowId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnId}) {
    $xfer += $output->writeFieldBegin('columnId', TType::I16, 2);
    $xfer += $output->writeI16($self->{columnId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_TombstoneColumn_result;
use base qw(Class::Accessor);
c4::C4_TombstoneColumn_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{ire} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{ire}) {
      $self->{ire} = $vals->{ire};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_TombstoneColumn_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{ire} = new c4::InvalidRequestException();
        $xfer += $self->{ire}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_TombstoneColumn_result');
  if (defined $self->{ire}) {
    $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
    $xfer += $self->{ire}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_TombstoneRow_args;
use base qw(Class::Accessor);
c4::C4_TombstoneRow_args->mk_accessors( qw( rowId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{rowId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{rowId}) {
      $self->{rowId} = $vals->{rowId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_TombstoneRow_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{rowId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_TombstoneRow_args');
  if (defined $self->{rowId}) {
    $xfer += $output->writeFieldBegin('rowId', TType::I64, 1);
    $xfer += $output->writeI64($self->{rowId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4_TombstoneRow_result;
use base qw(Class::Accessor);
c4::C4_TombstoneRow_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{ire} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{ire}) {
      $self->{ire} = $vals->{ire};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'C4_TombstoneRow_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{ire} = new c4::InvalidRequestException();
        $xfer += $self->{ire}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('C4_TombstoneRow_result');
  if (defined $self->{ire}) {
    $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
    $xfer += $self->{ire}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package c4::C4If;

use strict;


sub InsertOrUpdate{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;
  my $value = shift;
  my $ttl = shift;

  die 'implement interface';
}

sub Get{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;

  die 'implement interface';
}

sub TombstoneColumn{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;

  die 'implement interface';
}

sub TombstoneRow{
  my $self = shift;
  my $rowId = shift;

  die 'implement interface';
}

package c4::C4Rest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub InsertOrUpdate{
  my ($self, $request) = @_;

  my $rowId = ($request->{'rowId'}) ? $request->{'rowId'} : undef;
  my $columnId = ($request->{'columnId'}) ? $request->{'columnId'} : undef;
  my $value = ($request->{'value'}) ? $request->{'value'} : undef;
  my $ttl = ($request->{'ttl'}) ? $request->{'ttl'} : undef;
  return $self->{impl}->InsertOrUpdate($rowId, $columnId, $value, $ttl);
}

sub Get{
  my ($self, $request) = @_;

  my $rowId = ($request->{'rowId'}) ? $request->{'rowId'} : undef;
  my $columnId = ($request->{'columnId'}) ? $request->{'columnId'} : undef;
  return $self->{impl}->Get($rowId, $columnId);
}

sub TombstoneColumn{
  my ($self, $request) = @_;

  my $rowId = ($request->{'rowId'}) ? $request->{'rowId'} : undef;
  my $columnId = ($request->{'columnId'}) ? $request->{'columnId'} : undef;
  return $self->{impl}->TombstoneColumn($rowId, $columnId);
}

sub TombstoneRow{
  my ($self, $request) = @_;

  my $rowId = ($request->{'rowId'}) ? $request->{'rowId'} : undef;
  return $self->{impl}->TombstoneRow($rowId);
}

package c4::C4Client;


use base qw(c4::C4If);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub InsertOrUpdate{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;
  my $value = shift;
  my $ttl = shift;

    $self->send_InsertOrUpdate($rowId, $columnId, $value, $ttl);
  $self->recv_InsertOrUpdate();
}

sub send_InsertOrUpdate{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;
  my $value = shift;
  my $ttl = shift;

  $self->{output}->writeMessageBegin('InsertOrUpdate', TMessageType::CALL, $self->{seqid});
  my $args = new c4::C4_InsertOrUpdate_args();
  $args->{rowId} = $rowId;
  $args->{columnId} = $columnId;
  $args->{value} = $value;
  $args->{ttl} = $ttl;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_InsertOrUpdate{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new c4::C4_InsertOrUpdate_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{ire}) {
    die $result->{ire};
  }
  return;
}
sub Get{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;

    $self->send_Get($rowId, $columnId);
  return $self->recv_Get();
}

sub send_Get{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;

  $self->{output}->writeMessageBegin('Get', TMessageType::CALL, $self->{seqid});
  my $args = new c4::C4_Get_args();
  $args->{rowId} = $rowId;
  $args->{columnId} = $columnId;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_Get{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new c4::C4_Get_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{ire}) {
    die $result->{ire};
  }
  die "Get failed: unknown result";
}
sub TombstoneColumn{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;

    $self->send_TombstoneColumn($rowId, $columnId);
  $self->recv_TombstoneColumn();
}

sub send_TombstoneColumn{
  my $self = shift;
  my $rowId = shift;
  my $columnId = shift;

  $self->{output}->writeMessageBegin('TombstoneColumn', TMessageType::CALL, $self->{seqid});
  my $args = new c4::C4_TombstoneColumn_args();
  $args->{rowId} = $rowId;
  $args->{columnId} = $columnId;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_TombstoneColumn{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new c4::C4_TombstoneColumn_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{ire}) {
    die $result->{ire};
  }
  return;
}
sub TombstoneRow{
  my $self = shift;
  my $rowId = shift;

    $self->send_TombstoneRow($rowId);
  $self->recv_TombstoneRow();
}

sub send_TombstoneRow{
  my $self = shift;
  my $rowId = shift;

  $self->{output}->writeMessageBegin('TombstoneRow', TMessageType::CALL, $self->{seqid});
  my $args = new c4::C4_TombstoneRow_args();
  $args->{rowId} = $rowId;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_TombstoneRow{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new c4::C4_TombstoneRow_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{ire}) {
    die $result->{ire};
  }
  return;
}
package c4::C4Processor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_InsertOrUpdate {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new c4::C4_InsertOrUpdate_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new c4::C4_InsertOrUpdate_result();
    eval {
      $self->{handler}->InsertOrUpdate($args->rowId, $args->columnId, $args->value, $args->ttl);
    }; if( UNIVERSAL::isa($@,'c4::InvalidRequestException') ){ 
      $result->{ire} = $@;
    }
    $output->writeMessageBegin('InsertOrUpdate', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_Get {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new c4::C4_Get_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new c4::C4_Get_result();
    eval {
      $result->{success} = $self->{handler}->Get($args->rowId, $args->columnId);
    }; if( UNIVERSAL::isa($@,'c4::InvalidRequestException') ){ 
      $result->{ire} = $@;
    }
    $output->writeMessageBegin('Get', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_TombstoneColumn {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new c4::C4_TombstoneColumn_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new c4::C4_TombstoneColumn_result();
    eval {
      $self->{handler}->TombstoneColumn($args->rowId, $args->columnId);
    }; if( UNIVERSAL::isa($@,'c4::InvalidRequestException') ){ 
      $result->{ire} = $@;
    }
    $output->writeMessageBegin('TombstoneColumn', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_TombstoneRow {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new c4::C4_TombstoneRow_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new c4::C4_TombstoneRow_result();
    eval {
      $self->{handler}->TombstoneRow($args->rowId);
    }; if( UNIVERSAL::isa($@,'c4::InvalidRequestException') ){ 
      $result->{ire} = $@;
    }
    $output->writeMessageBegin('TombstoneRow', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
