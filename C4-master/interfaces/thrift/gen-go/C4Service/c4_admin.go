// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package C4Service

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type C4Admin interface {
	// Executes a compaction
	Compact() (err error)
	// Cleares the column store
	TabulaRasa() (err error)
	// Saves the column store
	// 
	// Parameters:
	//  - OutputStream
	Save(outputStream string) (ire *InvalidRequestException, err error)
	// Loads the columnstore
	// 
	// Parameters:
	//  - InputStream
	Load(inputStream string) (ire *InvalidRequestException, err error)
	// Shutdown
	Shutdown() (err error)
}

type C4AdminClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewC4AdminClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *C4AdminClient {
	return &C4AdminClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewC4AdminClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *C4AdminClient {
	return &C4AdminClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Executes a compaction
func (p *C4AdminClient) Compact() (err error) {
	if err = p.sendCompact(); err != nil {
		return
	}
	return
}

func (p *C4AdminClient) sendCompact() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("Compact", thrift.CALL, p.SeqId)
	args27 := NewCompactArgs()
	err = args27.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4AdminClient) recvCompact() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result28 := NewCompactResult()
	err = result28.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Cleares the column store
func (p *C4AdminClient) TabulaRasa() (err error) {
	if err = p.sendTabulaRasa(); err != nil {
		return
	}
	return
}

func (p *C4AdminClient) sendTabulaRasa() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("TabulaRasa", thrift.CALL, p.SeqId)
	args31 := NewTabulaRasaArgs()
	err = args31.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4AdminClient) recvTabulaRasa() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result32 := NewTabulaRasaResult()
	err = result32.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Saves the column store
// 
// Parameters:
//  - OutputStream
func (p *C4AdminClient) Save(outputStream string) (ire *InvalidRequestException, err error) {
	if err = p.sendSave(outputStream); err != nil {
		return
	}
	return p.recvSave()
}

func (p *C4AdminClient) sendSave(outputStream string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("Save", thrift.CALL, p.SeqId)
	args35 := NewSaveArgs()
	args35.OutputStream = outputStream
	err = args35.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4AdminClient) recvSave() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result36 := NewSaveResult()
	err = result36.Read(iprot)
	iprot.ReadMessageEnd()
	if result36.Ire != nil {
		ire = result36.Ire
	}
	return
}

// Loads the columnstore
// 
// Parameters:
//  - InputStream
func (p *C4AdminClient) Load(inputStream string) (ire *InvalidRequestException, err error) {
	if err = p.sendLoad(inputStream); err != nil {
		return
	}
	return p.recvLoad()
}

func (p *C4AdminClient) sendLoad(inputStream string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("Load", thrift.CALL, p.SeqId)
	args39 := NewLoadArgs()
	args39.InputStream = inputStream
	err = args39.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4AdminClient) recvLoad() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result40 := NewLoadResult()
	err = result40.Read(iprot)
	iprot.ReadMessageEnd()
	if result40.Ire != nil {
		ire = result40.Ire
	}
	return
}

// Shutdown
func (p *C4AdminClient) Shutdown() (err error) {
	if err = p.sendShutdown(); err != nil {
		return
	}
	return
}

func (p *C4AdminClient) sendShutdown() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("Shutdown", thrift.CALL, p.SeqId)
	args43 := NewShutdownArgs()
	err = args43.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4AdminClient) recvShutdown() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result44 := NewShutdownResult()
	err = result44.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type C4AdminProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      C4Admin
}

func (p *C4AdminProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *C4AdminProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *C4AdminProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewC4AdminProcessor(handler C4Admin) *C4AdminProcessor {

	self47 := &C4AdminProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self47.processorMap["Compact"] = &c4AdminProcessorCompact{handler: handler}
	self47.processorMap["TabulaRasa"] = &c4AdminProcessorTabulaRasa{handler: handler}
	self47.processorMap["Save"] = &c4AdminProcessorSave{handler: handler}
	self47.processorMap["Load"] = &c4AdminProcessorLoad{handler: handler}
	self47.processorMap["Shutdown"] = &c4AdminProcessorShutdown{handler: handler}
	return self47
}

func (p *C4AdminProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x48 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x48.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x48

}

type c4AdminProcessorCompact struct {
	handler C4Admin
}

func (p *c4AdminProcessorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCompactResult()
	if err = p.handler.Compact(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Compact: "+err.Error())
		oprot.WriteMessageBegin("Compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("Compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4AdminProcessorTabulaRasa struct {
	handler C4Admin
}

func (p *c4AdminProcessorTabulaRasa) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTabulaRasaArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TabulaRasa", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTabulaRasaResult()
	if err = p.handler.TabulaRasa(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TabulaRasa: "+err.Error())
		oprot.WriteMessageBegin("TabulaRasa", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("TabulaRasa", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4AdminProcessorSave struct {
	handler C4Admin
}

func (p *c4AdminProcessorSave) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSaveArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Save", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSaveResult()
	if result.Ire, err = p.handler.Save(args.OutputStream); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Save: "+err.Error())
		oprot.WriteMessageBegin("Save", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("Save", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4AdminProcessorLoad struct {
	handler C4Admin
}

func (p *c4AdminProcessorLoad) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewLoadArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Load", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewLoadResult()
	if result.Ire, err = p.handler.Load(args.InputStream); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Load: "+err.Error())
		oprot.WriteMessageBegin("Load", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("Load", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4AdminProcessorShutdown struct {
	handler C4Admin
}

func (p *c4AdminProcessorShutdown) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewShutdownArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Shutdown", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewShutdownResult()
	if err = p.handler.Shutdown(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Shutdown: "+err.Error())
		oprot.WriteMessageBegin("Shutdown", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("Shutdown", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CompactArgs struct {
}

func NewCompactArgs() *CompactArgs {
	return &CompactArgs{}
}

func (p *CompactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Compact_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactArgs(%+v)", *p)
}

type CompactResult struct {
}

func NewCompactResult() *CompactResult {
	return &CompactResult{}
}

func (p *CompactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Compact_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactResult(%+v)", *p)
}

type TabulaRasaArgs struct {
}

func NewTabulaRasaArgs() *TabulaRasaArgs {
	return &TabulaRasaArgs{}
}

func (p *TabulaRasaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TabulaRasaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TabulaRasa_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TabulaRasaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TabulaRasaArgs(%+v)", *p)
}

type TabulaRasaResult struct {
}

func NewTabulaRasaResult() *TabulaRasaResult {
	return &TabulaRasaResult{}
}

func (p *TabulaRasaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TabulaRasaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TabulaRasa_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TabulaRasaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TabulaRasaResult(%+v)", *p)
}

type SaveArgs struct {
	OutputStream string `thrift:"outputStream,1,required"`
}

func NewSaveArgs() *SaveArgs {
	return &SaveArgs{}
}

func (p *SaveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.OutputStream = v
	}
	return nil
}

func (p *SaveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Save_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outputStream", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:outputStream: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OutputStream)); err != nil {
		return fmt.Errorf("%T.outputStream (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:outputStream: %s", p, err)
	}
	return err
}

func (p *SaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveArgs(%+v)", *p)
}

type SaveResult struct {
	Ire *InvalidRequestException `thrift:"ire,1"`
}

func NewSaveResult() *SaveResult {
	return &SaveResult{}
}

func (p *SaveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveResult) readField1(iprot thrift.TProtocol) error {
	p.Ire = NewInvalidRequestException()
	if err := p.Ire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ire)
	}
	return nil
}

func (p *SaveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Save_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ire != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ire != nil {
		if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ire: %s", p, err)
		}
		if err := p.Ire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ire)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ire: %s", p, err)
		}
	}
	return err
}

func (p *SaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveResult(%+v)", *p)
}

type LoadArgs struct {
	InputStream string `thrift:"inputStream,1,required"`
}

func NewLoadArgs() *LoadArgs {
	return &LoadArgs{}
}

func (p *LoadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.InputStream = v
	}
	return nil
}

func (p *LoadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Load_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputStream", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:inputStream: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InputStream)); err != nil {
		return fmt.Errorf("%T.inputStream (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:inputStream: %s", p, err)
	}
	return err
}

func (p *LoadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoadArgs(%+v)", *p)
}

type LoadResult struct {
	Ire *InvalidRequestException `thrift:"ire,1"`
}

func NewLoadResult() *LoadResult {
	return &LoadResult{}
}

func (p *LoadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoadResult) readField1(iprot thrift.TProtocol) error {
	p.Ire = NewInvalidRequestException()
	if err := p.Ire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ire)
	}
	return nil
}

func (p *LoadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Load_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ire != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LoadResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ire != nil {
		if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ire: %s", p, err)
		}
		if err := p.Ire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ire)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ire: %s", p, err)
		}
	}
	return err
}

func (p *LoadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoadResult(%+v)", *p)
}

type ShutdownArgs struct {
}

func NewShutdownArgs() *ShutdownArgs {
	return &ShutdownArgs{}
}

func (p *ShutdownArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShutdownArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Shutdown_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShutdownArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShutdownArgs(%+v)", *p)
}

type ShutdownResult struct {
}

func NewShutdownResult() *ShutdownResult {
	return &ShutdownResult{}
}

func (p *ShutdownResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShutdownResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Shutdown_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShutdownResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShutdownResult(%+v)", *p)
}
