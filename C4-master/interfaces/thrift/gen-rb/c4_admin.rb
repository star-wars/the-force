#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'c4_service_types'

module C4Thrift
  module C4Admin
    class Client
      include ::Thrift::Client

      def Compact()
        send_Compact()
      end

      def send_Compact()
        send_message('Compact', Compact_args)
      end
      def TabulaRasa()
        send_TabulaRasa()
      end

      def send_TabulaRasa()
        send_message('TabulaRasa', TabulaRasa_args)
      end
      def Save(outputStream)
        send_Save(outputStream)
        recv_Save()
      end

      def send_Save(outputStream)
        send_message('Save', Save_args, :outputStream => outputStream)
      end

      def recv_Save()
        result = receive_message(Save_result)
        raise result.ire unless result.ire.nil?
        return
      end

      def Load(inputStream)
        send_Load(inputStream)
        recv_Load()
      end

      def send_Load(inputStream)
        send_message('Load', Load_args, :inputStream => inputStream)
      end

      def recv_Load()
        result = receive_message(Load_result)
        raise result.ire unless result.ire.nil?
        return
      end

      def Shutdown()
        send_Shutdown()
      end

      def send_Shutdown()
        send_message('Shutdown', Shutdown_args)
      end
    end

    class Processor
      include ::Thrift::Processor

      def process_Compact(seqid, iprot, oprot)
        args = read_args(iprot, Compact_args)
        @handler.Compact()
        return
      end

      def process_TabulaRasa(seqid, iprot, oprot)
        args = read_args(iprot, TabulaRasa_args)
        @handler.TabulaRasa()
        return
      end

      def process_Save(seqid, iprot, oprot)
        args = read_args(iprot, Save_args)
        result = Save_result.new()
        begin
          @handler.Save(args.outputStream)
        rescue ::C4Thrift::InvalidRequestException => ire
          result.ire = ire
        end
        write_result(result, oprot, 'Save', seqid)
      end

      def process_Load(seqid, iprot, oprot)
        args = read_args(iprot, Load_args)
        result = Load_result.new()
        begin
          @handler.Load(args.inputStream)
        rescue ::C4Thrift::InvalidRequestException => ire
          result.ire = ire
        end
        write_result(result, oprot, 'Load', seqid)
      end

      def process_Shutdown(seqid, iprot, oprot)
        args = read_args(iprot, Shutdown_args)
        @handler.Shutdown()
        return
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Compact_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Compact_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TabulaRasa_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TabulaRasa_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Save_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      OUTPUTSTREAM = 1

      FIELDS = {
        OUTPUTSTREAM => {:type => ::Thrift::Types::STRING, :name => 'outputStream'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field outputStream is unset!') unless @outputStream
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Save_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IRE = 1

      FIELDS = {
        IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::C4Thrift::InvalidRequestException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Load_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      INPUTSTREAM = 1

      FIELDS = {
        INPUTSTREAM => {:type => ::Thrift::Types::STRING, :name => 'inputStream'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field inputStream is unset!') unless @inputStream
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Load_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IRE = 1

      FIELDS = {
        IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::C4Thrift::InvalidRequestException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Shutdown_args
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Shutdown_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
