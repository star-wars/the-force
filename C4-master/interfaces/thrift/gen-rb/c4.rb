#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'c4_service_types'

module C4Thrift
  module C4
    class Client
      include ::Thrift::Client

      def InsertOrUpdate(rowId, columnId, value, ttl)
        send_InsertOrUpdate(rowId, columnId, value, ttl)
        recv_InsertOrUpdate()
      end

      def send_InsertOrUpdate(rowId, columnId, value, ttl)
        send_message('InsertOrUpdate', InsertOrUpdate_args, :rowId => rowId, :columnId => columnId, :value => value, :ttl => ttl)
      end

      def recv_InsertOrUpdate()
        result = receive_message(InsertOrUpdate_result)
        raise result.ire unless result.ire.nil?
        return
      end

      def Get(rowId, columnId)
        send_Get(rowId, columnId)
        return recv_Get()
      end

      def send_Get(rowId, columnId)
        send_message('Get', Get_args, :rowId => rowId, :columnId => columnId)
      end

      def recv_Get()
        result = receive_message(Get_result)
        return result.success unless result.success.nil?
        raise result.ire unless result.ire.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Get failed: unknown result')
      end

      def TombstoneColumn(rowId, columnId)
        send_TombstoneColumn(rowId, columnId)
        recv_TombstoneColumn()
      end

      def send_TombstoneColumn(rowId, columnId)
        send_message('TombstoneColumn', TombstoneColumn_args, :rowId => rowId, :columnId => columnId)
      end

      def recv_TombstoneColumn()
        result = receive_message(TombstoneColumn_result)
        raise result.ire unless result.ire.nil?
        return
      end

      def TombstoneRow(rowId)
        send_TombstoneRow(rowId)
        recv_TombstoneRow()
      end

      def send_TombstoneRow(rowId)
        send_message('TombstoneRow', TombstoneRow_args, :rowId => rowId)
      end

      def recv_TombstoneRow()
        result = receive_message(TombstoneRow_result)
        raise result.ire unless result.ire.nil?
        return
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_InsertOrUpdate(seqid, iprot, oprot)
        args = read_args(iprot, InsertOrUpdate_args)
        result = InsertOrUpdate_result.new()
        begin
          @handler.InsertOrUpdate(args.rowId, args.columnId, args.value, args.ttl)
        rescue ::C4Thrift::InvalidRequestException => ire
          result.ire = ire
        end
        write_result(result, oprot, 'InsertOrUpdate', seqid)
      end

      def process_Get(seqid, iprot, oprot)
        args = read_args(iprot, Get_args)
        result = Get_result.new()
        begin
          result.success = @handler.Get(args.rowId, args.columnId)
        rescue ::C4Thrift::InvalidRequestException => ire
          result.ire = ire
        end
        write_result(result, oprot, 'Get', seqid)
      end

      def process_TombstoneColumn(seqid, iprot, oprot)
        args = read_args(iprot, TombstoneColumn_args)
        result = TombstoneColumn_result.new()
        begin
          @handler.TombstoneColumn(args.rowId, args.columnId)
        rescue ::C4Thrift::InvalidRequestException => ire
          result.ire = ire
        end
        write_result(result, oprot, 'TombstoneColumn', seqid)
      end

      def process_TombstoneRow(seqid, iprot, oprot)
        args = read_args(iprot, TombstoneRow_args)
        result = TombstoneRow_result.new()
        begin
          @handler.TombstoneRow(args.rowId)
        rescue ::C4Thrift::InvalidRequestException => ire
          result.ire = ire
        end
        write_result(result, oprot, 'TombstoneRow', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class InsertOrUpdate_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ROWID = 1
      COLUMNID = 2
      VALUE = 3
      TTL = 4

      FIELDS = {
        ROWID => {:type => ::Thrift::Types::I64, :name => 'rowId'},
        COLUMNID => {:type => ::Thrift::Types::I16, :name => 'columnId'},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value', :binary => true},
        TTL => {:type => ::Thrift::Types::I32, :name => 'ttl', :default => 0}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field rowId is unset!') unless @rowId
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columnId is unset!') unless @columnId
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value is unset!') unless @value
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ttl is unset!') unless @ttl
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InsertOrUpdate_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IRE = 1

      FIELDS = {
        IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::C4Thrift::InvalidRequestException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ROWID = 1
      COLUMNID = 2

      FIELDS = {
        ROWID => {:type => ::Thrift::Types::I64, :name => 'rowId'},
        COLUMNID => {:type => ::Thrift::Types::I16, :name => 'columnId'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field rowId is unset!') unless @rowId
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columnId is unset!') unless @columnId
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      IRE = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
        IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::C4Thrift::InvalidRequestException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TombstoneColumn_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ROWID = 1
      COLUMNID = 2

      FIELDS = {
        ROWID => {:type => ::Thrift::Types::I64, :name => 'rowId'},
        COLUMNID => {:type => ::Thrift::Types::I16, :name => 'columnId'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field rowId is unset!') unless @rowId
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columnId is unset!') unless @columnId
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TombstoneColumn_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IRE = 1

      FIELDS = {
        IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::C4Thrift::InvalidRequestException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TombstoneRow_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ROWID = 1

      FIELDS = {
        ROWID => {:type => ::Thrift::Types::I64, :name => 'rowId'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field rowId is unset!') unless @rowId
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TombstoneRow_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IRE = 1

      FIELDS = {
        IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::C4Thrift::InvalidRequestException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
