/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef C4Admin_H
#define C4Admin_H

#include <thrift/TDispatchProcessor.h>
#include "C4Service_types.h"

namespace com { namespace cosh { namespace c4 { namespace thrift {

class C4AdminIf {
 public:
  virtual ~C4AdminIf() {}
  virtual void Compact() = 0;
  virtual void TabulaRasa() = 0;
  virtual void Save(const std::string& outputStream) = 0;
  virtual void Load(const std::string& inputStream) = 0;
  virtual void Shutdown() = 0;
};

class C4AdminIfFactory {
 public:
  typedef C4AdminIf Handler;

  virtual ~C4AdminIfFactory() {}

  virtual C4AdminIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(C4AdminIf* /* handler */) = 0;
};

class C4AdminIfSingletonFactory : virtual public C4AdminIfFactory {
 public:
  C4AdminIfSingletonFactory(const boost::shared_ptr<C4AdminIf>& iface) : iface_(iface) {}
  virtual ~C4AdminIfSingletonFactory() {}

  virtual C4AdminIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(C4AdminIf* /* handler */) {}

 protected:
  boost::shared_ptr<C4AdminIf> iface_;
};

class C4AdminNull : virtual public C4AdminIf {
 public:
  virtual ~C4AdminNull() {}
  void Compact() {
    return;
  }
  void TabulaRasa() {
    return;
  }
  void Save(const std::string& /* outputStream */) {
    return;
  }
  void Load(const std::string& /* inputStream */) {
    return;
  }
  void Shutdown() {
    return;
  }
};


class C4Admin_Compact_args {
 public:

  C4Admin_Compact_args() {
  }

  virtual ~C4Admin_Compact_args() throw() {}


  bool operator == (const C4Admin_Compact_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const C4Admin_Compact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_Compact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_Compact_pargs {
 public:


  virtual ~C4Admin_Compact_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_TabulaRasa_args {
 public:

  C4Admin_TabulaRasa_args() {
  }

  virtual ~C4Admin_TabulaRasa_args() throw() {}


  bool operator == (const C4Admin_TabulaRasa_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const C4Admin_TabulaRasa_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_TabulaRasa_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_TabulaRasa_pargs {
 public:


  virtual ~C4Admin_TabulaRasa_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_Save_args {
 public:

  C4Admin_Save_args() : outputStream() {
  }

  virtual ~C4Admin_Save_args() throw() {}

  std::string outputStream;

  void __set_outputStream(const std::string& val) {
    outputStream = val;
  }

  bool operator == (const C4Admin_Save_args & rhs) const
  {
    if (!(outputStream == rhs.outputStream))
      return false;
    return true;
  }
  bool operator != (const C4Admin_Save_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_Save_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_Save_pargs {
 public:


  virtual ~C4Admin_Save_pargs() throw() {}

  const std::string* outputStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4Admin_Save_result__isset {
  _C4Admin_Save_result__isset() : ire(false) {}
  bool ire;
} _C4Admin_Save_result__isset;

class C4Admin_Save_result {
 public:

  C4Admin_Save_result() {
  }

  virtual ~C4Admin_Save_result() throw() {}

  InvalidRequestException ire;

  _C4Admin_Save_result__isset __isset;

  void __set_ire(const InvalidRequestException& val) {
    ire = val;
  }

  bool operator == (const C4Admin_Save_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    return true;
  }
  bool operator != (const C4Admin_Save_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_Save_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4Admin_Save_presult__isset {
  _C4Admin_Save_presult__isset() : ire(false) {}
  bool ire;
} _C4Admin_Save_presult__isset;

class C4Admin_Save_presult {
 public:


  virtual ~C4Admin_Save_presult() throw() {}

  InvalidRequestException ire;

  _C4Admin_Save_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class C4Admin_Load_args {
 public:

  C4Admin_Load_args() : inputStream() {
  }

  virtual ~C4Admin_Load_args() throw() {}

  std::string inputStream;

  void __set_inputStream(const std::string& val) {
    inputStream = val;
  }

  bool operator == (const C4Admin_Load_args & rhs) const
  {
    if (!(inputStream == rhs.inputStream))
      return false;
    return true;
  }
  bool operator != (const C4Admin_Load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_Load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_Load_pargs {
 public:


  virtual ~C4Admin_Load_pargs() throw() {}

  const std::string* inputStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4Admin_Load_result__isset {
  _C4Admin_Load_result__isset() : ire(false) {}
  bool ire;
} _C4Admin_Load_result__isset;

class C4Admin_Load_result {
 public:

  C4Admin_Load_result() {
  }

  virtual ~C4Admin_Load_result() throw() {}

  InvalidRequestException ire;

  _C4Admin_Load_result__isset __isset;

  void __set_ire(const InvalidRequestException& val) {
    ire = val;
  }

  bool operator == (const C4Admin_Load_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    return true;
  }
  bool operator != (const C4Admin_Load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_Load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4Admin_Load_presult__isset {
  _C4Admin_Load_presult__isset() : ire(false) {}
  bool ire;
} _C4Admin_Load_presult__isset;

class C4Admin_Load_presult {
 public:


  virtual ~C4Admin_Load_presult() throw() {}

  InvalidRequestException ire;

  _C4Admin_Load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class C4Admin_Shutdown_args {
 public:

  C4Admin_Shutdown_args() {
  }

  virtual ~C4Admin_Shutdown_args() throw() {}


  bool operator == (const C4Admin_Shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const C4Admin_Shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4Admin_Shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4Admin_Shutdown_pargs {
 public:


  virtual ~C4Admin_Shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class C4AdminClient : virtual public C4AdminIf {
 public:
  C4AdminClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  C4AdminClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Compact();
  void send_Compact();
  void TabulaRasa();
  void send_TabulaRasa();
  void Save(const std::string& outputStream);
  void send_Save(const std::string& outputStream);
  void recv_Save();
  void Load(const std::string& inputStream);
  void send_Load(const std::string& inputStream);
  void recv_Load();
  void Shutdown();
  void send_Shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class C4AdminProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<C4AdminIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (C4AdminProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Compact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TabulaRasa(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Save(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  C4AdminProcessor(boost::shared_ptr<C4AdminIf> iface) :
    iface_(iface) {
    processMap_["Compact"] = &C4AdminProcessor::process_Compact;
    processMap_["TabulaRasa"] = &C4AdminProcessor::process_TabulaRasa;
    processMap_["Save"] = &C4AdminProcessor::process_Save;
    processMap_["Load"] = &C4AdminProcessor::process_Load;
    processMap_["Shutdown"] = &C4AdminProcessor::process_Shutdown;
  }

  virtual ~C4AdminProcessor() {}
};

class C4AdminProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  C4AdminProcessorFactory(const ::boost::shared_ptr< C4AdminIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< C4AdminIfFactory > handlerFactory_;
};

class C4AdminMultiface : virtual public C4AdminIf {
 public:
  C4AdminMultiface(std::vector<boost::shared_ptr<C4AdminIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~C4AdminMultiface() {}
 protected:
  std::vector<boost::shared_ptr<C4AdminIf> > ifaces_;
  C4AdminMultiface() {}
  void add(boost::shared_ptr<C4AdminIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Compact() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Compact();
    }
    ifaces_[i]->Compact();
  }

  void TabulaRasa() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TabulaRasa();
    }
    ifaces_[i]->TabulaRasa();
  }

  void Save(const std::string& outputStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Save(outputStream);
    }
    ifaces_[i]->Save(outputStream);
  }

  void Load(const std::string& inputStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Load(inputStream);
    }
    ifaces_[i]->Load(inputStream);
  }

  void Shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Shutdown();
    }
    ifaces_[i]->Shutdown();
  }

};

}}}} // namespace

#endif
