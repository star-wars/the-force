/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace cosh.c4
{
  public partial class C4 {
    public interface Iface {
      /// <summary>
      /// Inserts or updates a new row including the corresponding column with a new value
      /// 
      /// </summary>
      /// <param name="rowId"></param>
      /// <param name="columnId"></param>
      /// <param name="value"></param>
      /// <param name="ttl"></param>
      void InsertOrUpdate(long rowId, short columnId, byte[] value, int ttl);
      #if SILVERLIGHT
      IAsyncResult Begin_InsertOrUpdate(AsyncCallback callback, object state, long rowId, short columnId, byte[] value, int ttl);
      void End_InsertOrUpdate(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets a column in a row
      /// </summary>
      /// <param name="rowId"></param>
      /// <param name="columnId"></param>
      byte[] Get(long rowId, short columnId);
      #if SILVERLIGHT
      IAsyncResult Begin_Get(AsyncCallback callback, object state, long rowId, short columnId);
      byte[] End_Get(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Tombstones a column in a row. Tomestones are finally deleted in the next compaction.
      /// </summary>
      /// <param name="rowId"></param>
      /// <param name="columnId"></param>
      void TombstoneColumn(long rowId, short columnId);
      #if SILVERLIGHT
      IAsyncResult Begin_TombstoneColumn(AsyncCallback callback, object state, long rowId, short columnId);
      void End_TombstoneColumn(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Tombstones a row. Tomestones are finally deleted in the next compaction.
      /// </summary>
      /// <param name="rowId"></param>
      void TombstoneRow(long rowId);
      #if SILVERLIGHT
      IAsyncResult Begin_TombstoneRow(AsyncCallback callback, object state, long rowId);
      void End_TombstoneRow(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_InsertOrUpdate(AsyncCallback callback, object state, long rowId, short columnId, byte[] value, int ttl)
      {
        return send_InsertOrUpdate(callback, state, rowId, columnId, value, ttl);
      }

      public void End_InsertOrUpdate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_InsertOrUpdate();
      }

      #endif

      /// <summary>
      /// Inserts or updates a new row including the corresponding column with a new value
      /// 
      /// </summary>
      /// <param name="rowId"></param>
      /// <param name="columnId"></param>
      /// <param name="value"></param>
      /// <param name="ttl"></param>
      public void InsertOrUpdate(long rowId, short columnId, byte[] value, int ttl)
      {
        #if !SILVERLIGHT
        send_InsertOrUpdate(rowId, columnId, value, ttl);
        recv_InsertOrUpdate();

        #else
        var asyncResult = Begin_InsertOrUpdate(null, null, rowId, columnId, value, ttl);
        End_InsertOrUpdate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InsertOrUpdate(AsyncCallback callback, object state, long rowId, short columnId, byte[] value, int ttl)
      #else
      public void send_InsertOrUpdate(long rowId, short columnId, byte[] value, int ttl)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("InsertOrUpdate", TMessageType.Call, seqid_));
        InsertOrUpdate_args args = new InsertOrUpdate_args();
        args.RowId = rowId;
        args.ColumnId = columnId;
        args.Value = value;
        args.Ttl = ttl;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_InsertOrUpdate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InsertOrUpdate_result result = new InsertOrUpdate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Get(AsyncCallback callback, object state, long rowId, short columnId)
      {
        return send_Get(callback, state, rowId, columnId);
      }

      public byte[] End_Get(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Get();
      }

      #endif

      /// <summary>
      /// Gets a column in a row
      /// </summary>
      /// <param name="rowId"></param>
      /// <param name="columnId"></param>
      public byte[] Get(long rowId, short columnId)
      {
        #if !SILVERLIGHT
        send_Get(rowId, columnId);
        return recv_Get();

        #else
        var asyncResult = Begin_Get(null, null, rowId, columnId);
        return End_Get(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Get(AsyncCallback callback, object state, long rowId, short columnId)
      #else
      public void send_Get(long rowId, short columnId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Get", TMessageType.Call, seqid_));
        Get_args args = new Get_args();
        args.RowId = rowId;
        args.ColumnId = columnId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_Get()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Get_result result = new Get_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Get failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TombstoneColumn(AsyncCallback callback, object state, long rowId, short columnId)
      {
        return send_TombstoneColumn(callback, state, rowId, columnId);
      }

      public void End_TombstoneColumn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TombstoneColumn();
      }

      #endif

      /// <summary>
      /// Tombstones a column in a row. Tomestones are finally deleted in the next compaction.
      /// </summary>
      /// <param name="rowId"></param>
      /// <param name="columnId"></param>
      public void TombstoneColumn(long rowId, short columnId)
      {
        #if !SILVERLIGHT
        send_TombstoneColumn(rowId, columnId);
        recv_TombstoneColumn();

        #else
        var asyncResult = Begin_TombstoneColumn(null, null, rowId, columnId);
        End_TombstoneColumn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TombstoneColumn(AsyncCallback callback, object state, long rowId, short columnId)
      #else
      public void send_TombstoneColumn(long rowId, short columnId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TombstoneColumn", TMessageType.Call, seqid_));
        TombstoneColumn_args args = new TombstoneColumn_args();
        args.RowId = rowId;
        args.ColumnId = columnId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TombstoneColumn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TombstoneColumn_result result = new TombstoneColumn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TombstoneRow(AsyncCallback callback, object state, long rowId)
      {
        return send_TombstoneRow(callback, state, rowId);
      }

      public void End_TombstoneRow(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_TombstoneRow();
      }

      #endif

      /// <summary>
      /// Tombstones a row. Tomestones are finally deleted in the next compaction.
      /// </summary>
      /// <param name="rowId"></param>
      public void TombstoneRow(long rowId)
      {
        #if !SILVERLIGHT
        send_TombstoneRow(rowId);
        recv_TombstoneRow();

        #else
        var asyncResult = Begin_TombstoneRow(null, null, rowId);
        End_TombstoneRow(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TombstoneRow(AsyncCallback callback, object state, long rowId)
      #else
      public void send_TombstoneRow(long rowId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TombstoneRow", TMessageType.Call, seqid_));
        TombstoneRow_args args = new TombstoneRow_args();
        args.RowId = rowId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_TombstoneRow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TombstoneRow_result result = new TombstoneRow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["InsertOrUpdate"] = InsertOrUpdate_Process;
        processMap_["Get"] = Get_Process;
        processMap_["TombstoneColumn"] = TombstoneColumn_Process;
        processMap_["TombstoneRow"] = TombstoneRow_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void InsertOrUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InsertOrUpdate_args args = new InsertOrUpdate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InsertOrUpdate_result result = new InsertOrUpdate_result();
        try {
          iface_.InsertOrUpdate(args.RowId, args.ColumnId, args.Value, args.Ttl);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        }
        oprot.WriteMessageBegin(new TMessage("InsertOrUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Get_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Get_args args = new Get_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Get_result result = new Get_result();
        try {
          result.Success = iface_.Get(args.RowId, args.ColumnId);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        }
        oprot.WriteMessageBegin(new TMessage("Get", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TombstoneColumn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TombstoneColumn_args args = new TombstoneColumn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TombstoneColumn_result result = new TombstoneColumn_result();
        try {
          iface_.TombstoneColumn(args.RowId, args.ColumnId);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        }
        oprot.WriteMessageBegin(new TMessage("TombstoneColumn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TombstoneRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TombstoneRow_args args = new TombstoneRow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TombstoneRow_result result = new TombstoneRow_result();
        try {
          iface_.TombstoneRow(args.RowId);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        }
        oprot.WriteMessageBegin(new TMessage("TombstoneRow", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertOrUpdate_args : TBase
    {

      public long RowId { get; set; }

      public short ColumnId { get; set; }

      public byte[] Value { get; set; }

      public int Ttl { get; set; }

      public InsertOrUpdate_args() {
        this.Ttl = 0;
      }

      public InsertOrUpdate_args(long rowId, short columnId, byte[] value, int ttl) : this() {
        this.RowId = rowId;
        this.ColumnId = columnId;
        this.Value = value;
        this.Ttl = ttl;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_rowId = false;
        bool isset_columnId = false;
        bool isset_value = false;
        bool isset_ttl = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                RowId = iprot.ReadI64();
                isset_rowId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                ColumnId = iprot.ReadI16();
                isset_columnId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadBinary();
                isset_value = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Ttl = iprot.ReadI32();
                isset_ttl = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_rowId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_columnId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_value)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ttl)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("InsertOrUpdate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "rowId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RowId);
        oprot.WriteFieldEnd();
        field.Name = "columnId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ColumnId);
        oprot.WriteFieldEnd();
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
        field.Name = "ttl";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ttl);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("InsertOrUpdate_args(");
        sb.Append("RowId: ");
        sb.Append(RowId);
        sb.Append(",ColumnId: ");
        sb.Append(ColumnId);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(",Ttl: ");
        sb.Append(Ttl);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertOrUpdate_result : TBase
    {
      private InvalidRequestException _ire;

      public InvalidRequestException Ire
      {
        get
        {
          return _ire;
        }
        set
        {
          __isset.ire = true;
          this._ire = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ire;
      }

      public InsertOrUpdate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ire = new InvalidRequestException();
                Ire.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("InsertOrUpdate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (Ire != null) {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("InsertOrUpdate_result(");
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Get_args : TBase
    {

      public long RowId { get; set; }

      public short ColumnId { get; set; }

      public Get_args() {
      }

      public Get_args(long rowId, short columnId) : this() {
        this.RowId = rowId;
        this.ColumnId = columnId;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_rowId = false;
        bool isset_columnId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                RowId = iprot.ReadI64();
                isset_rowId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                ColumnId = iprot.ReadI16();
                isset_columnId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_rowId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_columnId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "rowId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RowId);
        oprot.WriteFieldEnd();
        field.Name = "columnId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ColumnId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Get_args(");
        sb.Append("RowId: ");
        sb.Append(RowId);
        sb.Append(",ColumnId: ");
        sb.Append(ColumnId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Get_result : TBase
    {
      private byte[] _success;
      private InvalidRequestException _ire;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return _ire;
        }
        set
        {
          __isset.ire = true;
          this._ire = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ire;
      }

      public Get_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ire = new InvalidRequestException();
                Ire.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (Ire != null) {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Get_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TombstoneColumn_args : TBase
    {

      public long RowId { get; set; }

      public short ColumnId { get; set; }

      public TombstoneColumn_args() {
      }

      public TombstoneColumn_args(long rowId, short columnId) : this() {
        this.RowId = rowId;
        this.ColumnId = columnId;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_rowId = false;
        bool isset_columnId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                RowId = iprot.ReadI64();
                isset_rowId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I16) {
                ColumnId = iprot.ReadI16();
                isset_columnId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_rowId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_columnId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TombstoneColumn_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "rowId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RowId);
        oprot.WriteFieldEnd();
        field.Name = "columnId";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ColumnId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TombstoneColumn_args(");
        sb.Append("RowId: ");
        sb.Append(RowId);
        sb.Append(",ColumnId: ");
        sb.Append(ColumnId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TombstoneColumn_result : TBase
    {
      private InvalidRequestException _ire;

      public InvalidRequestException Ire
      {
        get
        {
          return _ire;
        }
        set
        {
          __isset.ire = true;
          this._ire = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ire;
      }

      public TombstoneColumn_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ire = new InvalidRequestException();
                Ire.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TombstoneColumn_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (Ire != null) {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TombstoneColumn_result(");
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TombstoneRow_args : TBase
    {

      public long RowId { get; set; }

      public TombstoneRow_args() {
      }

      public TombstoneRow_args(long rowId) : this() {
        this.RowId = rowId;
      }

      public void Read (TProtocol iprot)
      {
        bool isset_rowId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                RowId = iprot.ReadI64();
                isset_rowId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_rowId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TombstoneRow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "rowId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RowId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TombstoneRow_args(");
        sb.Append("RowId: ");
        sb.Append(RowId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TombstoneRow_result : TBase
    {
      private InvalidRequestException _ire;

      public InvalidRequestException Ire
      {
        get
        {
          return _ire;
        }
        set
        {
          __isset.ire = true;
          this._ire = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ire;
      }

      public TombstoneRow_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ire = new InvalidRequestException();
                Ire.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TombstoneRow_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (Ire != null) {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TombstoneRow_result(");
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
