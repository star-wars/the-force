/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cosh.c4.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class C4 {

  public interface Iface {

    /**
     * Inserts or updates a new row including the corresponding column with a new value
     * 
     * 
     * @param rowId
     * @param columnId
     * @param value
     * @param ttl
     */
    public void InsertOrUpdate(long rowId, short columnId, ByteBuffer value, int ttl) throws InvalidRequestException, org.apache.thrift.TException;

    /**
     * Gets a column in a row
     * 
     * @param rowId
     * @param columnId
     */
    public ByteBuffer Get(long rowId, short columnId) throws InvalidRequestException, org.apache.thrift.TException;

    /**
     * Tombstones a column in a row. Tomestones are finally deleted in the next compaction.
     * 
     * @param rowId
     * @param columnId
     */
    public void TombstoneColumn(long rowId, short columnId) throws InvalidRequestException, org.apache.thrift.TException;

    /**
     * Tombstones a row. Tomestones are finally deleted in the next compaction.
     * 
     * @param rowId
     */
    public void TombstoneRow(long rowId) throws InvalidRequestException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void InsertOrUpdate(long rowId, short columnId, ByteBuffer value, int ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Get(long rowId, short columnId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void TombstoneColumn(long rowId, short columnId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void TombstoneRow(long rowId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void InsertOrUpdate(long rowId, short columnId, ByteBuffer value, int ttl) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_InsertOrUpdate(rowId, columnId, value, ttl);
      recv_InsertOrUpdate();
    }

    public void send_InsertOrUpdate(long rowId, short columnId, ByteBuffer value, int ttl) throws org.apache.thrift.TException
    {
      InsertOrUpdate_args args = new InsertOrUpdate_args();
      args.setRowId(rowId);
      args.setColumnId(columnId);
      args.setValue(value);
      args.setTtl(ttl);
      sendBase("InsertOrUpdate", args);
    }

    public void recv_InsertOrUpdate() throws InvalidRequestException, org.apache.thrift.TException
    {
      InsertOrUpdate_result result = new InsertOrUpdate_result();
      receiveBase(result, "InsertOrUpdate");
      if (result.ire != null) {
        throw result.ire;
      }
      return;
    }

    public ByteBuffer Get(long rowId, short columnId) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_Get(rowId, columnId);
      return recv_Get();
    }

    public void send_Get(long rowId, short columnId) throws org.apache.thrift.TException
    {
      Get_args args = new Get_args();
      args.setRowId(rowId);
      args.setColumnId(columnId);
      sendBase("Get", args);
    }

    public ByteBuffer recv_Get() throws InvalidRequestException, org.apache.thrift.TException
    {
      Get_result result = new Get_result();
      receiveBase(result, "Get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Get failed: unknown result");
    }

    public void TombstoneColumn(long rowId, short columnId) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_TombstoneColumn(rowId, columnId);
      recv_TombstoneColumn();
    }

    public void send_TombstoneColumn(long rowId, short columnId) throws org.apache.thrift.TException
    {
      TombstoneColumn_args args = new TombstoneColumn_args();
      args.setRowId(rowId);
      args.setColumnId(columnId);
      sendBase("TombstoneColumn", args);
    }

    public void recv_TombstoneColumn() throws InvalidRequestException, org.apache.thrift.TException
    {
      TombstoneColumn_result result = new TombstoneColumn_result();
      receiveBase(result, "TombstoneColumn");
      if (result.ire != null) {
        throw result.ire;
      }
      return;
    }

    public void TombstoneRow(long rowId) throws InvalidRequestException, org.apache.thrift.TException
    {
      send_TombstoneRow(rowId);
      recv_TombstoneRow();
    }

    public void send_TombstoneRow(long rowId) throws org.apache.thrift.TException
    {
      TombstoneRow_args args = new TombstoneRow_args();
      args.setRowId(rowId);
      sendBase("TombstoneRow", args);
    }

    public void recv_TombstoneRow() throws InvalidRequestException, org.apache.thrift.TException
    {
      TombstoneRow_result result = new TombstoneRow_result();
      receiveBase(result, "TombstoneRow");
      if (result.ire != null) {
        throw result.ire;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void InsertOrUpdate(long rowId, short columnId, ByteBuffer value, int ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      InsertOrUpdate_call method_call = new InsertOrUpdate_call(rowId, columnId, value, ttl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class InsertOrUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rowId;
      private short columnId;
      private ByteBuffer value;
      private int ttl;
      public InsertOrUpdate_call(long rowId, short columnId, ByteBuffer value, int ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowId = rowId;
        this.columnId = columnId;
        this.value = value;
        this.ttl = ttl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InsertOrUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        InsertOrUpdate_args args = new InsertOrUpdate_args();
        args.setRowId(rowId);
        args.setColumnId(columnId);
        args.setValue(value);
        args.setTtl(ttl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_InsertOrUpdate();
      }
    }

    public void Get(long rowId, short columnId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Get_call method_call = new Get_call(rowId, columnId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rowId;
      private short columnId;
      public Get_call(long rowId, short columnId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowId = rowId;
        this.columnId = columnId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Get_args args = new Get_args();
        args.setRowId(rowId);
        args.setColumnId(columnId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Get();
      }
    }

    public void TombstoneColumn(long rowId, short columnId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TombstoneColumn_call method_call = new TombstoneColumn_call(rowId, columnId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TombstoneColumn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rowId;
      private short columnId;
      public TombstoneColumn_call(long rowId, short columnId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowId = rowId;
        this.columnId = columnId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TombstoneColumn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TombstoneColumn_args args = new TombstoneColumn_args();
        args.setRowId(rowId);
        args.setColumnId(columnId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_TombstoneColumn();
      }
    }

    public void TombstoneRow(long rowId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TombstoneRow_call method_call = new TombstoneRow_call(rowId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TombstoneRow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rowId;
      public TombstoneRow_call(long rowId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowId = rowId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TombstoneRow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TombstoneRow_args args = new TombstoneRow_args();
        args.setRowId(rowId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_TombstoneRow();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("InsertOrUpdate", new InsertOrUpdate());
      processMap.put("Get", new Get());
      processMap.put("TombstoneColumn", new TombstoneColumn());
      processMap.put("TombstoneRow", new TombstoneRow());
      return processMap;
    }

    public static class InsertOrUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, InsertOrUpdate_args> {
      public InsertOrUpdate() {
        super("InsertOrUpdate");
      }

      public InsertOrUpdate_args getEmptyArgsInstance() {
        return new InsertOrUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public InsertOrUpdate_result getResult(I iface, InsertOrUpdate_args args) throws org.apache.thrift.TException {
        InsertOrUpdate_result result = new InsertOrUpdate_result();
        try {
          iface.InsertOrUpdate(args.rowId, args.columnId, args.value, args.ttl);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class Get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Get_args> {
      public Get() {
        super("Get");
      }

      public Get_args getEmptyArgsInstance() {
        return new Get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Get_result getResult(I iface, Get_args args) throws org.apache.thrift.TException {
        Get_result result = new Get_result();
        try {
          result.success = iface.Get(args.rowId, args.columnId);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class TombstoneColumn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TombstoneColumn_args> {
      public TombstoneColumn() {
        super("TombstoneColumn");
      }

      public TombstoneColumn_args getEmptyArgsInstance() {
        return new TombstoneColumn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public TombstoneColumn_result getResult(I iface, TombstoneColumn_args args) throws org.apache.thrift.TException {
        TombstoneColumn_result result = new TombstoneColumn_result();
        try {
          iface.TombstoneColumn(args.rowId, args.columnId);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

    public static class TombstoneRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TombstoneRow_args> {
      public TombstoneRow() {
        super("TombstoneRow");
      }

      public TombstoneRow_args getEmptyArgsInstance() {
        return new TombstoneRow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public TombstoneRow_result getResult(I iface, TombstoneRow_args args) throws org.apache.thrift.TException {
        TombstoneRow_result result = new TombstoneRow_result();
        try {
          iface.TombstoneRow(args.rowId);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("InsertOrUpdate", new InsertOrUpdate());
      processMap.put("Get", new Get());
      processMap.put("TombstoneColumn", new TombstoneColumn());
      processMap.put("TombstoneRow", new TombstoneRow());
      return processMap;
    }

    public static class InsertOrUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, InsertOrUpdate_args, Void> {
      public InsertOrUpdate() {
        super("InsertOrUpdate");
      }

      public InsertOrUpdate_args getEmptyArgsInstance() {
        return new InsertOrUpdate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            InsertOrUpdate_result result = new InsertOrUpdate_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            InsertOrUpdate_result result = new InsertOrUpdate_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, InsertOrUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.InsertOrUpdate(args.rowId, args.columnId, args.value, args.ttl,resultHandler);
      }
    }

    public static class Get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Get_args, ByteBuffer> {
      public Get() {
        super("Get");
      }

      public Get_args getEmptyArgsInstance() {
        return new Get_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            Get_result result = new Get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Get_result result = new Get_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Get_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.Get(args.rowId, args.columnId,resultHandler);
      }
    }

    public static class TombstoneColumn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TombstoneColumn_args, Void> {
      public TombstoneColumn() {
        super("TombstoneColumn");
      }

      public TombstoneColumn_args getEmptyArgsInstance() {
        return new TombstoneColumn_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            TombstoneColumn_result result = new TombstoneColumn_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            TombstoneColumn_result result = new TombstoneColumn_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TombstoneColumn_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.TombstoneColumn(args.rowId, args.columnId,resultHandler);
      }
    }

    public static class TombstoneRow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TombstoneRow_args, Void> {
      public TombstoneRow() {
        super("TombstoneRow");
      }

      public TombstoneRow_args getEmptyArgsInstance() {
        return new TombstoneRow_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            TombstoneRow_result result = new TombstoneRow_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            TombstoneRow_result result = new TombstoneRow_result();
            if (e instanceof InvalidRequestException) {
                        result.ire = (InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TombstoneRow_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.TombstoneRow(args.rowId,resultHandler);
      }
    }

  }

  public static class InsertOrUpdate_args implements org.apache.thrift.TBase<InsertOrUpdate_args, InsertOrUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<InsertOrUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertOrUpdate_args");

    private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnId", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new InsertOrUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new InsertOrUpdate_argsTupleSchemeFactory());
    }

    public long rowId; // required
    public short columnId; // required
    public ByteBuffer value; // required
    public int ttl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROW_ID((short)1, "rowId"),
      COLUMN_ID((short)2, "columnId"),
      VALUE((short)3, "value"),
      TTL((short)4, "ttl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROW_ID
            return ROW_ID;
          case 2: // COLUMN_ID
            return COLUMN_ID;
          case 3: // VALUE
            return VALUE;
          case 4: // TTL
            return TTL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWID_ISSET_ID = 0;
    private static final int __COLUMNID_ISSET_ID = 1;
    private static final int __TTL_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRowKey")));
      tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("columnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16          , "TColumnKey")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TValue")));
      tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TTTL")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertOrUpdate_args.class, metaDataMap);
    }

    public InsertOrUpdate_args() {
      this.ttl = 0;

    }

    public InsertOrUpdate_args(
      long rowId,
      short columnId,
      ByteBuffer value,
      int ttl)
    {
      this();
      this.rowId = rowId;
      setRowIdIsSet(true);
      this.columnId = columnId;
      setColumnIdIsSet(true);
      this.value = value;
      this.ttl = ttl;
      setTtlIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InsertOrUpdate_args(InsertOrUpdate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rowId = other.rowId;
      this.columnId = other.columnId;
      if (other.isSetValue()) {
        this.value = other.value;
      }
      this.ttl = other.ttl;
    }

    public InsertOrUpdate_args deepCopy() {
      return new InsertOrUpdate_args(this);
    }

    @Override
    public void clear() {
      setRowIdIsSet(false);
      this.rowId = 0;
      setColumnIdIsSet(false);
      this.columnId = 0;
      this.value = null;
      this.ttl = 0;

    }

    public long getRowId() {
      return this.rowId;
    }

    public InsertOrUpdate_args setRowId(long rowId) {
      this.rowId = rowId;
      setRowIdIsSet(true);
      return this;
    }

    public void unsetRowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
    public boolean isSetRowId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    public void setRowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWID_ISSET_ID, value);
    }

    public short getColumnId() {
      return this.columnId;
    }

    public InsertOrUpdate_args setColumnId(short columnId) {
      this.columnId = columnId;
      setColumnIdIsSet(true);
      return this;
    }

    public void unsetColumnId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNID_ISSET_ID);
    }

    /** Returns true if field columnId is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnId() {
      return EncodingUtils.testBit(__isset_bitfield, __COLUMNID_ISSET_ID);
    }

    public void setColumnIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNID_ISSET_ID, value);
    }

    public byte[] getValue() {
      setValue(org.apache.thrift.TBaseHelper.rightSize(value));
      return value == null ? null : value.array();
    }

    public ByteBuffer bufferForValue() {
      return value;
    }

    public InsertOrUpdate_args setValue(byte[] value) {
      setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
      return this;
    }

    public InsertOrUpdate_args setValue(ByteBuffer value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public int getTtl() {
      return this.ttl;
    }

    public InsertOrUpdate_args setTtl(int ttl) {
      this.ttl = ttl;
      setTtlIsSet(true);
      return this;
    }

    public void unsetTtl() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
    }

    /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
    public boolean isSetTtl() {
      return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
    }

    public void setTtlIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROW_ID:
        if (value == null) {
          unsetRowId();
        } else {
          setRowId((Long)value);
        }
        break;

      case COLUMN_ID:
        if (value == null) {
          unsetColumnId();
        } else {
          setColumnId((Short)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((ByteBuffer)value);
        }
        break;

      case TTL:
        if (value == null) {
          unsetTtl();
        } else {
          setTtl((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROW_ID:
        return Long.valueOf(getRowId());

      case COLUMN_ID:
        return Short.valueOf(getColumnId());

      case VALUE:
        return getValue();

      case TTL:
        return Integer.valueOf(getTtl());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROW_ID:
        return isSetRowId();
      case COLUMN_ID:
        return isSetColumnId();
      case VALUE:
        return isSetValue();
      case TTL:
        return isSetTtl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof InsertOrUpdate_args)
        return this.equals((InsertOrUpdate_args)that);
      return false;
    }

    public boolean equals(InsertOrUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_rowId = true;
      boolean that_present_rowId = true;
      if (this_present_rowId || that_present_rowId) {
        if (!(this_present_rowId && that_present_rowId))
          return false;
        if (this.rowId != that.rowId)
          return false;
      }

      boolean this_present_columnId = true;
      boolean that_present_columnId = true;
      if (this_present_columnId || that_present_columnId) {
        if (!(this_present_columnId && that_present_columnId))
          return false;
        if (this.columnId != that.columnId)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_ttl = true;
      boolean that_present_ttl = true;
      if (this_present_ttl || that_present_ttl) {
        if (!(this_present_ttl && that_present_ttl))
          return false;
        if (this.ttl != that.ttl)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(InsertOrUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowId()).compareTo(other.isSetRowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, other.rowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnId()).compareTo(other.isSetColumnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnId, other.columnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTtl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("InsertOrUpdate_args(");
      boolean first = true;

      sb.append("rowId:");
      sb.append(this.rowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnId:");
      sb.append(this.columnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'rowId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'columnId' because it's a primitive and you chose the non-beans generator.
      if (value == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'ttl' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InsertOrUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public InsertOrUpdate_argsStandardScheme getScheme() {
        return new InsertOrUpdate_argsStandardScheme();
      }
    }

    private static class InsertOrUpdate_argsStandardScheme extends StandardScheme<InsertOrUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InsertOrUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowId = iprot.readI64();
                struct.setRowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.columnId = iprot.readI16();
                struct.setColumnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readBinary();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TTL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ttl = iprot.readI32();
                struct.setTtlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRowId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetColumnId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetTtl()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'ttl' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InsertOrUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
        oprot.writeI64(struct.rowId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
        oprot.writeI16(struct.columnId);
        oprot.writeFieldEnd();
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeBinary(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI32(struct.ttl);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InsertOrUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public InsertOrUpdate_argsTupleScheme getScheme() {
        return new InsertOrUpdate_argsTupleScheme();
      }
    }

    private static class InsertOrUpdate_argsTupleScheme extends TupleScheme<InsertOrUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InsertOrUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.rowId);
        oprot.writeI16(struct.columnId);
        oprot.writeBinary(struct.value);
        oprot.writeI32(struct.ttl);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InsertOrUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.rowId = iprot.readI64();
        struct.setRowIdIsSet(true);
        struct.columnId = iprot.readI16();
        struct.setColumnIdIsSet(true);
        struct.value = iprot.readBinary();
        struct.setValueIsSet(true);
        struct.ttl = iprot.readI32();
        struct.setTtlIsSet(true);
      }
    }

  }

  public static class InsertOrUpdate_result implements org.apache.thrift.TBase<InsertOrUpdate_result, InsertOrUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<InsertOrUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertOrUpdate_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new InsertOrUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new InsertOrUpdate_resultTupleSchemeFactory());
    }

    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertOrUpdate_result.class, metaDataMap);
    }

    public InsertOrUpdate_result() {
    }

    public InsertOrUpdate_result(
      InvalidRequestException ire)
    {
      this();
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InsertOrUpdate_result(InsertOrUpdate_result other) {
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public InsertOrUpdate_result deepCopy() {
      return new InsertOrUpdate_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public InsertOrUpdate_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof InsertOrUpdate_result)
        return this.equals((InsertOrUpdate_result)that);
      return false;
    }

    public boolean equals(InsertOrUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(InsertOrUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("InsertOrUpdate_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InsertOrUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public InsertOrUpdate_resultStandardScheme getScheme() {
        return new InsertOrUpdate_resultStandardScheme();
      }
    }

    private static class InsertOrUpdate_resultStandardScheme extends StandardScheme<InsertOrUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InsertOrUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InsertOrUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InsertOrUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public InsertOrUpdate_resultTupleScheme getScheme() {
        return new InsertOrUpdate_resultTupleScheme();
      }
    }

    private static class InsertOrUpdate_resultTupleScheme extends TupleScheme<InsertOrUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InsertOrUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InsertOrUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class Get_args implements org.apache.thrift.TBase<Get_args, Get_args._Fields>, java.io.Serializable, Cloneable, Comparable<Get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Get_args");

    private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnId", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Get_argsTupleSchemeFactory());
    }

    public long rowId; // required
    public short columnId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROW_ID((short)1, "rowId"),
      COLUMN_ID((short)2, "columnId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROW_ID
            return ROW_ID;
          case 2: // COLUMN_ID
            return COLUMN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWID_ISSET_ID = 0;
    private static final int __COLUMNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRowKey")));
      tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("columnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16          , "TColumnKey")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Get_args.class, metaDataMap);
    }

    public Get_args() {
    }

    public Get_args(
      long rowId,
      short columnId)
    {
      this();
      this.rowId = rowId;
      setRowIdIsSet(true);
      this.columnId = columnId;
      setColumnIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Get_args(Get_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rowId = other.rowId;
      this.columnId = other.columnId;
    }

    public Get_args deepCopy() {
      return new Get_args(this);
    }

    @Override
    public void clear() {
      setRowIdIsSet(false);
      this.rowId = 0;
      setColumnIdIsSet(false);
      this.columnId = 0;
    }

    public long getRowId() {
      return this.rowId;
    }

    public Get_args setRowId(long rowId) {
      this.rowId = rowId;
      setRowIdIsSet(true);
      return this;
    }

    public void unsetRowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
    public boolean isSetRowId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    public void setRowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWID_ISSET_ID, value);
    }

    public short getColumnId() {
      return this.columnId;
    }

    public Get_args setColumnId(short columnId) {
      this.columnId = columnId;
      setColumnIdIsSet(true);
      return this;
    }

    public void unsetColumnId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNID_ISSET_ID);
    }

    /** Returns true if field columnId is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnId() {
      return EncodingUtils.testBit(__isset_bitfield, __COLUMNID_ISSET_ID);
    }

    public void setColumnIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROW_ID:
        if (value == null) {
          unsetRowId();
        } else {
          setRowId((Long)value);
        }
        break;

      case COLUMN_ID:
        if (value == null) {
          unsetColumnId();
        } else {
          setColumnId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROW_ID:
        return Long.valueOf(getRowId());

      case COLUMN_ID:
        return Short.valueOf(getColumnId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROW_ID:
        return isSetRowId();
      case COLUMN_ID:
        return isSetColumnId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Get_args)
        return this.equals((Get_args)that);
      return false;
    }

    public boolean equals(Get_args that) {
      if (that == null)
        return false;

      boolean this_present_rowId = true;
      boolean that_present_rowId = true;
      if (this_present_rowId || that_present_rowId) {
        if (!(this_present_rowId && that_present_rowId))
          return false;
        if (this.rowId != that.rowId)
          return false;
      }

      boolean this_present_columnId = true;
      boolean that_present_columnId = true;
      if (this_present_columnId || that_present_columnId) {
        if (!(this_present_columnId && that_present_columnId))
          return false;
        if (this.columnId != that.columnId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(Get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowId()).compareTo(other.isSetRowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, other.rowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnId()).compareTo(other.isSetColumnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnId, other.columnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Get_args(");
      boolean first = true;

      sb.append("rowId:");
      sb.append(this.rowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnId:");
      sb.append(this.columnId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'rowId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'columnId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Get_argsStandardSchemeFactory implements SchemeFactory {
      public Get_argsStandardScheme getScheme() {
        return new Get_argsStandardScheme();
      }
    }

    private static class Get_argsStandardScheme extends StandardScheme<Get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowId = iprot.readI64();
                struct.setRowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.columnId = iprot.readI16();
                struct.setColumnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRowId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetColumnId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
        oprot.writeI64(struct.rowId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
        oprot.writeI16(struct.columnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Get_argsTupleSchemeFactory implements SchemeFactory {
      public Get_argsTupleScheme getScheme() {
        return new Get_argsTupleScheme();
      }
    }

    private static class Get_argsTupleScheme extends TupleScheme<Get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.rowId);
        oprot.writeI16(struct.columnId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.rowId = iprot.readI64();
        struct.setRowIdIsSet(true);
        struct.columnId = iprot.readI16();
        struct.setColumnIdIsSet(true);
      }
    }

  }

  public static class Get_result implements org.apache.thrift.TBase<Get_result, Get_result._Fields>, java.io.Serializable, Cloneable, Comparable<Get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Get_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required
    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TValue")));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Get_result.class, metaDataMap);
    }

    public Get_result() {
    }

    public Get_result(
      ByteBuffer success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Get_result(Get_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public Get_result deepCopy() {
      return new Get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public Get_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public Get_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public Get_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Get_result)
        return this.equals((Get_result)that);
      return false;
    }

    public boolean equals(Get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(Get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Get_resultStandardSchemeFactory implements SchemeFactory {
      public Get_resultStandardScheme getScheme() {
        return new Get_resultStandardScheme();
      }
    }

    private static class Get_resultStandardScheme extends StandardScheme<Get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Get_resultTupleSchemeFactory implements SchemeFactory {
      public Get_resultTupleScheme getScheme() {
        return new Get_resultTupleScheme();
      }
    }

    private static class Get_resultTupleScheme extends TupleScheme<Get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class TombstoneColumn_args implements org.apache.thrift.TBase<TombstoneColumn_args, TombstoneColumn_args._Fields>, java.io.Serializable, Cloneable, Comparable<TombstoneColumn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TombstoneColumn_args");

    private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnId", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TombstoneColumn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TombstoneColumn_argsTupleSchemeFactory());
    }

    public long rowId; // required
    public short columnId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROW_ID((short)1, "rowId"),
      COLUMN_ID((short)2, "columnId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROW_ID
            return ROW_ID;
          case 2: // COLUMN_ID
            return COLUMN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWID_ISSET_ID = 0;
    private static final int __COLUMNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRowKey")));
      tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("columnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16          , "TColumnKey")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TombstoneColumn_args.class, metaDataMap);
    }

    public TombstoneColumn_args() {
    }

    public TombstoneColumn_args(
      long rowId,
      short columnId)
    {
      this();
      this.rowId = rowId;
      setRowIdIsSet(true);
      this.columnId = columnId;
      setColumnIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TombstoneColumn_args(TombstoneColumn_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rowId = other.rowId;
      this.columnId = other.columnId;
    }

    public TombstoneColumn_args deepCopy() {
      return new TombstoneColumn_args(this);
    }

    @Override
    public void clear() {
      setRowIdIsSet(false);
      this.rowId = 0;
      setColumnIdIsSet(false);
      this.columnId = 0;
    }

    public long getRowId() {
      return this.rowId;
    }

    public TombstoneColumn_args setRowId(long rowId) {
      this.rowId = rowId;
      setRowIdIsSet(true);
      return this;
    }

    public void unsetRowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
    public boolean isSetRowId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    public void setRowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWID_ISSET_ID, value);
    }

    public short getColumnId() {
      return this.columnId;
    }

    public TombstoneColumn_args setColumnId(short columnId) {
      this.columnId = columnId;
      setColumnIdIsSet(true);
      return this;
    }

    public void unsetColumnId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNID_ISSET_ID);
    }

    /** Returns true if field columnId is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnId() {
      return EncodingUtils.testBit(__isset_bitfield, __COLUMNID_ISSET_ID);
    }

    public void setColumnIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROW_ID:
        if (value == null) {
          unsetRowId();
        } else {
          setRowId((Long)value);
        }
        break;

      case COLUMN_ID:
        if (value == null) {
          unsetColumnId();
        } else {
          setColumnId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROW_ID:
        return Long.valueOf(getRowId());

      case COLUMN_ID:
        return Short.valueOf(getColumnId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROW_ID:
        return isSetRowId();
      case COLUMN_ID:
        return isSetColumnId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TombstoneColumn_args)
        return this.equals((TombstoneColumn_args)that);
      return false;
    }

    public boolean equals(TombstoneColumn_args that) {
      if (that == null)
        return false;

      boolean this_present_rowId = true;
      boolean that_present_rowId = true;
      if (this_present_rowId || that_present_rowId) {
        if (!(this_present_rowId && that_present_rowId))
          return false;
        if (this.rowId != that.rowId)
          return false;
      }

      boolean this_present_columnId = true;
      boolean that_present_columnId = true;
      if (this_present_columnId || that_present_columnId) {
        if (!(this_present_columnId && that_present_columnId))
          return false;
        if (this.columnId != that.columnId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(TombstoneColumn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowId()).compareTo(other.isSetRowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, other.rowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnId()).compareTo(other.isSetColumnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnId, other.columnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TombstoneColumn_args(");
      boolean first = true;

      sb.append("rowId:");
      sb.append(this.rowId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnId:");
      sb.append(this.columnId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'rowId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'columnId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TombstoneColumn_argsStandardSchemeFactory implements SchemeFactory {
      public TombstoneColumn_argsStandardScheme getScheme() {
        return new TombstoneColumn_argsStandardScheme();
      }
    }

    private static class TombstoneColumn_argsStandardScheme extends StandardScheme<TombstoneColumn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TombstoneColumn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowId = iprot.readI64();
                struct.setRowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.columnId = iprot.readI16();
                struct.setColumnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRowId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetColumnId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TombstoneColumn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
        oprot.writeI64(struct.rowId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
        oprot.writeI16(struct.columnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TombstoneColumn_argsTupleSchemeFactory implements SchemeFactory {
      public TombstoneColumn_argsTupleScheme getScheme() {
        return new TombstoneColumn_argsTupleScheme();
      }
    }

    private static class TombstoneColumn_argsTupleScheme extends TupleScheme<TombstoneColumn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TombstoneColumn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.rowId);
        oprot.writeI16(struct.columnId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TombstoneColumn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.rowId = iprot.readI64();
        struct.setRowIdIsSet(true);
        struct.columnId = iprot.readI16();
        struct.setColumnIdIsSet(true);
      }
    }

  }

  public static class TombstoneColumn_result implements org.apache.thrift.TBase<TombstoneColumn_result, TombstoneColumn_result._Fields>, java.io.Serializable, Cloneable, Comparable<TombstoneColumn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TombstoneColumn_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TombstoneColumn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TombstoneColumn_resultTupleSchemeFactory());
    }

    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TombstoneColumn_result.class, metaDataMap);
    }

    public TombstoneColumn_result() {
    }

    public TombstoneColumn_result(
      InvalidRequestException ire)
    {
      this();
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TombstoneColumn_result(TombstoneColumn_result other) {
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public TombstoneColumn_result deepCopy() {
      return new TombstoneColumn_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public TombstoneColumn_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TombstoneColumn_result)
        return this.equals((TombstoneColumn_result)that);
      return false;
    }

    public boolean equals(TombstoneColumn_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(TombstoneColumn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TombstoneColumn_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TombstoneColumn_resultStandardSchemeFactory implements SchemeFactory {
      public TombstoneColumn_resultStandardScheme getScheme() {
        return new TombstoneColumn_resultStandardScheme();
      }
    }

    private static class TombstoneColumn_resultStandardScheme extends StandardScheme<TombstoneColumn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TombstoneColumn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TombstoneColumn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TombstoneColumn_resultTupleSchemeFactory implements SchemeFactory {
      public TombstoneColumn_resultTupleScheme getScheme() {
        return new TombstoneColumn_resultTupleScheme();
      }
    }

    private static class TombstoneColumn_resultTupleScheme extends TupleScheme<TombstoneColumn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TombstoneColumn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TombstoneColumn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

  public static class TombstoneRow_args implements org.apache.thrift.TBase<TombstoneRow_args, TombstoneRow_args._Fields>, java.io.Serializable, Cloneable, Comparable<TombstoneRow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TombstoneRow_args");

    private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TombstoneRow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TombstoneRow_argsTupleSchemeFactory());
    }

    public long rowId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROW_ID((short)1, "rowId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROW_ID
            return ROW_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRowKey")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TombstoneRow_args.class, metaDataMap);
    }

    public TombstoneRow_args() {
    }

    public TombstoneRow_args(
      long rowId)
    {
      this();
      this.rowId = rowId;
      setRowIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TombstoneRow_args(TombstoneRow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rowId = other.rowId;
    }

    public TombstoneRow_args deepCopy() {
      return new TombstoneRow_args(this);
    }

    @Override
    public void clear() {
      setRowIdIsSet(false);
      this.rowId = 0;
    }

    public long getRowId() {
      return this.rowId;
    }

    public TombstoneRow_args setRowId(long rowId) {
      this.rowId = rowId;
      setRowIdIsSet(true);
      return this;
    }

    public void unsetRowId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
    public boolean isSetRowId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROWID_ISSET_ID);
    }

    public void setRowIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROW_ID:
        if (value == null) {
          unsetRowId();
        } else {
          setRowId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROW_ID:
        return Long.valueOf(getRowId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROW_ID:
        return isSetRowId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TombstoneRow_args)
        return this.equals((TombstoneRow_args)that);
      return false;
    }

    public boolean equals(TombstoneRow_args that) {
      if (that == null)
        return false;

      boolean this_present_rowId = true;
      boolean that_present_rowId = true;
      if (this_present_rowId || that_present_rowId) {
        if (!(this_present_rowId && that_present_rowId))
          return false;
        if (this.rowId != that.rowId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(TombstoneRow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRowId()).compareTo(other.isSetRowId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, other.rowId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TombstoneRow_args(");
      boolean first = true;

      sb.append("rowId:");
      sb.append(this.rowId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'rowId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TombstoneRow_argsStandardSchemeFactory implements SchemeFactory {
      public TombstoneRow_argsStandardScheme getScheme() {
        return new TombstoneRow_argsStandardScheme();
      }
    }

    private static class TombstoneRow_argsStandardScheme extends StandardScheme<TombstoneRow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TombstoneRow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROW_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowId = iprot.readI64();
                struct.setRowIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRowId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TombstoneRow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
        oprot.writeI64(struct.rowId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TombstoneRow_argsTupleSchemeFactory implements SchemeFactory {
      public TombstoneRow_argsTupleScheme getScheme() {
        return new TombstoneRow_argsTupleScheme();
      }
    }

    private static class TombstoneRow_argsTupleScheme extends TupleScheme<TombstoneRow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TombstoneRow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.rowId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TombstoneRow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.rowId = iprot.readI64();
        struct.setRowIdIsSet(true);
      }
    }

  }

  public static class TombstoneRow_result implements org.apache.thrift.TBase<TombstoneRow_result, TombstoneRow_result._Fields>, java.io.Serializable, Cloneable, Comparable<TombstoneRow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TombstoneRow_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TombstoneRow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TombstoneRow_resultTupleSchemeFactory());
    }

    public InvalidRequestException ire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TombstoneRow_result.class, metaDataMap);
    }

    public TombstoneRow_result() {
    }

    public TombstoneRow_result(
      InvalidRequestException ire)
    {
      this();
      this.ire = ire;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TombstoneRow_result(TombstoneRow_result other) {
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
    }

    public TombstoneRow_result deepCopy() {
      return new TombstoneRow_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
    }

    public InvalidRequestException getIre() {
      return this.ire;
    }

    public TombstoneRow_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TombstoneRow_result)
        return this.equals((TombstoneRow_result)that);
      return false;
    }

    public boolean equals(TombstoneRow_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(TombstoneRow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TombstoneRow_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TombstoneRow_resultStandardSchemeFactory implements SchemeFactory {
      public TombstoneRow_resultStandardScheme getScheme() {
        return new TombstoneRow_resultStandardScheme();
      }
    }

    private static class TombstoneRow_resultStandardScheme extends StandardScheme<TombstoneRow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TombstoneRow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TombstoneRow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TombstoneRow_resultTupleSchemeFactory implements SchemeFactory {
      public TombstoneRow_resultTupleScheme getScheme() {
        return new TombstoneRow_resultTupleScheme();
      }
    }

    private static class TombstoneRow_resultTupleScheme extends TupleScheme<TombstoneRow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TombstoneRow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TombstoneRow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ire = new InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
      }
    }

  }

}
