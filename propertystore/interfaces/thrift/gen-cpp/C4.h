/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef C4_H
#define C4_H

#include <thrift/TDispatchProcessor.h>
#include "C4Service_types.h"

namespace com { namespace cosh { namespace c4 { namespace thrift {

class C4If {
 public:
  virtual ~C4If() {}
  virtual void InsertOrUpdate(const TRowKey rowId, const TColumnKey columnId, const TValue& value, const TTTL ttl) = 0;
  virtual void Get(TValue& _return, const TRowKey rowId, const TColumnKey columnId) = 0;
  virtual void TombstoneColumn(const TRowKey rowId, const TColumnKey columnId) = 0;
  virtual void TombstoneRow(const TRowKey rowId) = 0;
};

class C4IfFactory {
 public:
  typedef C4If Handler;

  virtual ~C4IfFactory() {}

  virtual C4If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(C4If* /* handler */) = 0;
};

class C4IfSingletonFactory : virtual public C4IfFactory {
 public:
  C4IfSingletonFactory(const boost::shared_ptr<C4If>& iface) : iface_(iface) {}
  virtual ~C4IfSingletonFactory() {}

  virtual C4If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(C4If* /* handler */) {}

 protected:
  boost::shared_ptr<C4If> iface_;
};

class C4Null : virtual public C4If {
 public:
  virtual ~C4Null() {}
  void InsertOrUpdate(const TRowKey /* rowId */, const TColumnKey /* columnId */, const TValue& /* value */, const TTTL /* ttl */) {
    return;
  }
  void Get(TValue& /* _return */, const TRowKey /* rowId */, const TColumnKey /* columnId */) {
    return;
  }
  void TombstoneColumn(const TRowKey /* rowId */, const TColumnKey /* columnId */) {
    return;
  }
  void TombstoneRow(const TRowKey /* rowId */) {
    return;
  }
};


class C4_InsertOrUpdate_args {
 public:

  C4_InsertOrUpdate_args() : rowId(0), columnId(0), value(), ttl(0) {
  }

  virtual ~C4_InsertOrUpdate_args() throw() {}

  TRowKey rowId;
  TColumnKey columnId;
  TValue value;
  TTTL ttl;

  void __set_rowId(const TRowKey val) {
    rowId = val;
  }

  void __set_columnId(const TColumnKey val) {
    columnId = val;
  }

  void __set_value(const TValue& val) {
    value = val;
  }

  void __set_ttl(const TTTL val) {
    ttl = val;
  }

  bool operator == (const C4_InsertOrUpdate_args & rhs) const
  {
    if (!(rowId == rhs.rowId))
      return false;
    if (!(columnId == rhs.columnId))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(ttl == rhs.ttl))
      return false;
    return true;
  }
  bool operator != (const C4_InsertOrUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_InsertOrUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4_InsertOrUpdate_pargs {
 public:


  virtual ~C4_InsertOrUpdate_pargs() throw() {}

  const TRowKey* rowId;
  const TColumnKey* columnId;
  const TValue* value;
  const TTTL* ttl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_InsertOrUpdate_result__isset {
  _C4_InsertOrUpdate_result__isset() : ire(false) {}
  bool ire;
} _C4_InsertOrUpdate_result__isset;

class C4_InsertOrUpdate_result {
 public:

  C4_InsertOrUpdate_result() {
  }

  virtual ~C4_InsertOrUpdate_result() throw() {}

  InvalidRequestException ire;

  _C4_InsertOrUpdate_result__isset __isset;

  void __set_ire(const InvalidRequestException& val) {
    ire = val;
  }

  bool operator == (const C4_InsertOrUpdate_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    return true;
  }
  bool operator != (const C4_InsertOrUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_InsertOrUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_InsertOrUpdate_presult__isset {
  _C4_InsertOrUpdate_presult__isset() : ire(false) {}
  bool ire;
} _C4_InsertOrUpdate_presult__isset;

class C4_InsertOrUpdate_presult {
 public:


  virtual ~C4_InsertOrUpdate_presult() throw() {}

  InvalidRequestException ire;

  _C4_InsertOrUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class C4_Get_args {
 public:

  C4_Get_args() : rowId(0), columnId(0) {
  }

  virtual ~C4_Get_args() throw() {}

  TRowKey rowId;
  TColumnKey columnId;

  void __set_rowId(const TRowKey val) {
    rowId = val;
  }

  void __set_columnId(const TColumnKey val) {
    columnId = val;
  }

  bool operator == (const C4_Get_args & rhs) const
  {
    if (!(rowId == rhs.rowId))
      return false;
    if (!(columnId == rhs.columnId))
      return false;
    return true;
  }
  bool operator != (const C4_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4_Get_pargs {
 public:


  virtual ~C4_Get_pargs() throw() {}

  const TRowKey* rowId;
  const TColumnKey* columnId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_Get_result__isset {
  _C4_Get_result__isset() : success(false), ire(false) {}
  bool success;
  bool ire;
} _C4_Get_result__isset;

class C4_Get_result {
 public:

  C4_Get_result() : success() {
  }

  virtual ~C4_Get_result() throw() {}

  TValue success;
  InvalidRequestException ire;

  _C4_Get_result__isset __isset;

  void __set_success(const TValue& val) {
    success = val;
  }

  void __set_ire(const InvalidRequestException& val) {
    ire = val;
  }

  bool operator == (const C4_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    return true;
  }
  bool operator != (const C4_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_Get_presult__isset {
  _C4_Get_presult__isset() : success(false), ire(false) {}
  bool success;
  bool ire;
} _C4_Get_presult__isset;

class C4_Get_presult {
 public:


  virtual ~C4_Get_presult() throw() {}

  TValue* success;
  InvalidRequestException ire;

  _C4_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class C4_TombstoneColumn_args {
 public:

  C4_TombstoneColumn_args() : rowId(0), columnId(0) {
  }

  virtual ~C4_TombstoneColumn_args() throw() {}

  TRowKey rowId;
  TColumnKey columnId;

  void __set_rowId(const TRowKey val) {
    rowId = val;
  }

  void __set_columnId(const TColumnKey val) {
    columnId = val;
  }

  bool operator == (const C4_TombstoneColumn_args & rhs) const
  {
    if (!(rowId == rhs.rowId))
      return false;
    if (!(columnId == rhs.columnId))
      return false;
    return true;
  }
  bool operator != (const C4_TombstoneColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_TombstoneColumn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4_TombstoneColumn_pargs {
 public:


  virtual ~C4_TombstoneColumn_pargs() throw() {}

  const TRowKey* rowId;
  const TColumnKey* columnId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_TombstoneColumn_result__isset {
  _C4_TombstoneColumn_result__isset() : ire(false) {}
  bool ire;
} _C4_TombstoneColumn_result__isset;

class C4_TombstoneColumn_result {
 public:

  C4_TombstoneColumn_result() {
  }

  virtual ~C4_TombstoneColumn_result() throw() {}

  InvalidRequestException ire;

  _C4_TombstoneColumn_result__isset __isset;

  void __set_ire(const InvalidRequestException& val) {
    ire = val;
  }

  bool operator == (const C4_TombstoneColumn_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    return true;
  }
  bool operator != (const C4_TombstoneColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_TombstoneColumn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_TombstoneColumn_presult__isset {
  _C4_TombstoneColumn_presult__isset() : ire(false) {}
  bool ire;
} _C4_TombstoneColumn_presult__isset;

class C4_TombstoneColumn_presult {
 public:


  virtual ~C4_TombstoneColumn_presult() throw() {}

  InvalidRequestException ire;

  _C4_TombstoneColumn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class C4_TombstoneRow_args {
 public:

  C4_TombstoneRow_args() : rowId(0) {
  }

  virtual ~C4_TombstoneRow_args() throw() {}

  TRowKey rowId;

  void __set_rowId(const TRowKey val) {
    rowId = val;
  }

  bool operator == (const C4_TombstoneRow_args & rhs) const
  {
    if (!(rowId == rhs.rowId))
      return false;
    return true;
  }
  bool operator != (const C4_TombstoneRow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_TombstoneRow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class C4_TombstoneRow_pargs {
 public:


  virtual ~C4_TombstoneRow_pargs() throw() {}

  const TRowKey* rowId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_TombstoneRow_result__isset {
  _C4_TombstoneRow_result__isset() : ire(false) {}
  bool ire;
} _C4_TombstoneRow_result__isset;

class C4_TombstoneRow_result {
 public:

  C4_TombstoneRow_result() {
  }

  virtual ~C4_TombstoneRow_result() throw() {}

  InvalidRequestException ire;

  _C4_TombstoneRow_result__isset __isset;

  void __set_ire(const InvalidRequestException& val) {
    ire = val;
  }

  bool operator == (const C4_TombstoneRow_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    return true;
  }
  bool operator != (const C4_TombstoneRow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const C4_TombstoneRow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _C4_TombstoneRow_presult__isset {
  _C4_TombstoneRow_presult__isset() : ire(false) {}
  bool ire;
} _C4_TombstoneRow_presult__isset;

class C4_TombstoneRow_presult {
 public:


  virtual ~C4_TombstoneRow_presult() throw() {}

  InvalidRequestException ire;

  _C4_TombstoneRow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class C4Client : virtual public C4If {
 public:
  C4Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  C4Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void InsertOrUpdate(const TRowKey rowId, const TColumnKey columnId, const TValue& value, const TTTL ttl);
  void send_InsertOrUpdate(const TRowKey rowId, const TColumnKey columnId, const TValue& value, const TTTL ttl);
  void recv_InsertOrUpdate();
  void Get(TValue& _return, const TRowKey rowId, const TColumnKey columnId);
  void send_Get(const TRowKey rowId, const TColumnKey columnId);
  void recv_Get(TValue& _return);
  void TombstoneColumn(const TRowKey rowId, const TColumnKey columnId);
  void send_TombstoneColumn(const TRowKey rowId, const TColumnKey columnId);
  void recv_TombstoneColumn();
  void TombstoneRow(const TRowKey rowId);
  void send_TombstoneRow(const TRowKey rowId);
  void recv_TombstoneRow();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class C4Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<C4If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (C4Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_InsertOrUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TombstoneColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TombstoneRow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  C4Processor(boost::shared_ptr<C4If> iface) :
    iface_(iface) {
    processMap_["InsertOrUpdate"] = &C4Processor::process_InsertOrUpdate;
    processMap_["Get"] = &C4Processor::process_Get;
    processMap_["TombstoneColumn"] = &C4Processor::process_TombstoneColumn;
    processMap_["TombstoneRow"] = &C4Processor::process_TombstoneRow;
  }

  virtual ~C4Processor() {}
};

class C4ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  C4ProcessorFactory(const ::boost::shared_ptr< C4IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< C4IfFactory > handlerFactory_;
};

class C4Multiface : virtual public C4If {
 public:
  C4Multiface(std::vector<boost::shared_ptr<C4If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~C4Multiface() {}
 protected:
  std::vector<boost::shared_ptr<C4If> > ifaces_;
  C4Multiface() {}
  void add(boost::shared_ptr<C4If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void InsertOrUpdate(const TRowKey rowId, const TColumnKey columnId, const TValue& value, const TTTL ttl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InsertOrUpdate(rowId, columnId, value, ttl);
    }
    ifaces_[i]->InsertOrUpdate(rowId, columnId, value, ttl);
  }

  void Get(TValue& _return, const TRowKey rowId, const TColumnKey columnId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, rowId, columnId);
    }
    ifaces_[i]->Get(_return, rowId, columnId);
    return;
  }

  void TombstoneColumn(const TRowKey rowId, const TColumnKey columnId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TombstoneColumn(rowId, columnId);
    }
    ifaces_[i]->TombstoneColumn(rowId, columnId);
  }

  void TombstoneRow(const TRowKey rowId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TombstoneRow(rowId);
    }
    ifaces_[i]->TombstoneRow(rowId);
  }

};

}}}} // namespace

#endif
