#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use c4::Types;

# HELPER FUNCTIONS AND STRUCTURES

package c4::C4Admin_Compact_args;
use base qw(Class::Accessor);

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Compact_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Compact_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Compact_result;
use base qw(Class::Accessor);

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Compact_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Compact_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_TabulaRasa_args;
use base qw(Class::Accessor);

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_TabulaRasa_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_TabulaRasa_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_TabulaRasa_result;
use base qw(Class::Accessor);

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_TabulaRasa_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_TabulaRasa_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Save_args;
use base qw(Class::Accessor);
c4::C4Admin_Save_args->mk_accessors( qw( outputStream ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{outputStream} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{outputStream}) {
        $self->{outputStream} = $vals->{outputStream};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Save_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^1$/ && do{        if ($ftype == TType::STRING) {
          $xfer += $input->readString(\$self->{outputStream});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Save_args');
    if (defined $self->{outputStream}) {
      $xfer += $output->writeFieldBegin('outputStream', TType::STRING, 1);
      $xfer += $output->writeString($self->{outputStream});
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Save_result;
use base qw(Class::Accessor);
c4::C4Admin_Save_result->mk_accessors( qw( ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{ire} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{ire}) {
        $self->{ire} = $vals->{ire};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Save_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^1$/ && do{        if ($ftype == TType::STRUCT) {
          $self->{ire} = new c4::InvalidRequestException();
          $xfer += $self->{ire}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Save_result');
    if (defined $self->{ire}) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $self->{ire}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Load_args;
use base qw(Class::Accessor);
c4::C4Admin_Load_args->mk_accessors( qw( inputStream ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{inputStream} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{inputStream}) {
        $self->{inputStream} = $vals->{inputStream};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Load_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^1$/ && do{        if ($ftype == TType::STRING) {
          $xfer += $input->readString(\$self->{inputStream});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Load_args');
    if (defined $self->{inputStream}) {
      $xfer += $output->writeFieldBegin('inputStream', TType::STRING, 1);
      $xfer += $output->writeString($self->{inputStream});
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Load_result;
use base qw(Class::Accessor);
c4::C4Admin_Load_result->mk_accessors( qw( ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{ire} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{ire}) {
        $self->{ire} = $vals->{ire};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Load_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^1$/ && do{        if ($ftype == TType::STRUCT) {
          $self->{ire} = new c4::InvalidRequestException();
          $xfer += $self->{ire}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Load_result');
    if (defined $self->{ire}) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $self->{ire}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Shutdown_args;
use base qw(Class::Accessor);

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Shutdown_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Shutdown_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4Admin_Shutdown_result;
use base qw(Class::Accessor);

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    return bless ($self, $classname);
}

sub getName {
    return 'C4Admin_Shutdown_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1) 
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('C4Admin_Shutdown_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package c4::C4AdminIf;

use strict;


sub Compact{
  my $self = shift;

  die 'implement interface';
}

sub TabulaRasa{
  my $self = shift;

  die 'implement interface';
}

sub Save{
  my $self = shift;
  my $outputStream = shift;

  die 'implement interface';
}

sub Load{
  my $self = shift;
  my $inputStream = shift;

  die 'implement interface';
}

sub Shutdown{
  my $self = shift;

  die 'implement interface';
}

package c4::C4AdminRest;

use strict;


sub new {
    my ($classname, $impl) = @_;
    my $self     ={ impl => $impl };

    return bless($self,$classname);
}

sub Compact{
    my ($self, $request) = @_;

    return $self->{impl}->Compact();
  }

sub TabulaRasa{
    my ($self, $request) = @_;

    return $self->{impl}->TabulaRasa();
  }

sub Save{
    my ($self, $request) = @_;

    my $outputStream = ($request->{'outputStream'}) ? $request->{'outputStream'} : undef;
    return $self->{impl}->Save($outputStream);
  }

sub Load{
    my ($self, $request) = @_;

    my $inputStream = ($request->{'inputStream'}) ? $request->{'inputStream'} : undef;
    return $self->{impl}->Load($inputStream);
  }

sub Shutdown{
    my ($self, $request) = @_;

    return $self->{impl}->Shutdown();
  }

package c4::C4AdminClient;


use base qw(c4::C4AdminIf);
sub new {
    my ($classname, $input, $output) = @_;
    my $self      = {};
    $self->{input}  = $input;
    $self->{output} = defined $output ? $output : $input;
    $self->{seqid}  = 0;
    return bless($self,$classname);
}

sub Compact{
  my $self = shift;

        $self->send_Compact();
}

sub send_Compact{
  my $self = shift;

    $self->{output}->writeMessageBegin('Compact', TMessageType::CALL, $self->{seqid});
    my $args = new c4::C4Admin_Compact_args();
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}
sub TabulaRasa{
  my $self = shift;

        $self->send_TabulaRasa();
}

sub send_TabulaRasa{
  my $self = shift;

    $self->{output}->writeMessageBegin('TabulaRasa', TMessageType::CALL, $self->{seqid});
    my $args = new c4::C4Admin_TabulaRasa_args();
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}
sub Save{
  my $self = shift;
  my $outputStream = shift;

        $self->send_Save($outputStream);
    $self->recv_Save();
}

sub send_Save{
  my $self = shift;
  my $outputStream = shift;

    $self->{output}->writeMessageBegin('Save', TMessageType::CALL, $self->{seqid});
    my $args = new c4::C4Admin_Save_args();
    $args->{outputStream} = $outputStream;
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}

sub recv_Save{
  my $self = shift;

    my $rseqid = 0;
    my $fname;
    my $mtype = 0;

    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
    if ($mtype == TMessageType::EXCEPTION) {
      my $x = new TApplicationException();
      $x->read($self->{input});
      $self->{input}->readMessageEnd();
      die $x;
    }
    my $result = new c4::C4Admin_Save_result();
    $result->read($self->{input});
    $self->{input}->readMessageEnd();

    if (defined $result->{ire}) {
      die $result->{ire};
    }
    return;
}
sub Load{
  my $self = shift;
  my $inputStream = shift;

        $self->send_Load($inputStream);
    $self->recv_Load();
}

sub send_Load{
  my $self = shift;
  my $inputStream = shift;

    $self->{output}->writeMessageBegin('Load', TMessageType::CALL, $self->{seqid});
    my $args = new c4::C4Admin_Load_args();
    $args->{inputStream} = $inputStream;
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}

sub recv_Load{
  my $self = shift;

    my $rseqid = 0;
    my $fname;
    my $mtype = 0;

    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
    if ($mtype == TMessageType::EXCEPTION) {
      my $x = new TApplicationException();
      $x->read($self->{input});
      $self->{input}->readMessageEnd();
      die $x;
    }
    my $result = new c4::C4Admin_Load_result();
    $result->read($self->{input});
    $self->{input}->readMessageEnd();

    if (defined $result->{ire}) {
      die $result->{ire};
    }
    return;
}
sub Shutdown{
  my $self = shift;

        $self->send_Shutdown();
}

sub send_Shutdown{
  my $self = shift;

    $self->{output}->writeMessageBegin('Shutdown', TMessageType::CALL, $self->{seqid});
    my $args = new c4::C4Admin_Shutdown_args();
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}
package c4::C4AdminProcessor;

use strict;


sub new {
      my ($classname, $handler) = @_;
      my $self      = {};
      $self->{handler} = $handler;
      return bless ($self, $classname);
}

sub process {
      my ($self, $input, $output) = @_;
      my $rseqid = 0;
      my $fname  = undef;
      my $mtype  = 0;

      $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
      my $methodname = 'process_'.$fname;
      if (!$self->can($methodname)) {
        $input->skip(TType::STRUCT);
        $input->readMessageEnd();
        my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
        $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
        $x->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
        return;
      }
      $self->$methodname($rseqid, $input, $output);
      return 1;
}

sub process_Compact {
      my ($self, $seqid, $input, $output) = @_;
      my $args = new c4::C4Admin_Compact_args();
      $args->read($input);
      $input->readMessageEnd();
      $self->{handler}->Compact();
      return;
}
sub process_TabulaRasa {
      my ($self, $seqid, $input, $output) = @_;
      my $args = new c4::C4Admin_TabulaRasa_args();
      $args->read($input);
      $input->readMessageEnd();
      $self->{handler}->TabulaRasa();
      return;
}
sub process_Save {
      my ($self, $seqid, $input, $output) = @_;
      my $args = new c4::C4Admin_Save_args();
      $args->read($input);
      $input->readMessageEnd();
      my $result = new c4::C4Admin_Save_result();
      eval {
        $self->{handler}->Save($args->outputStream);
      }; if( UNIVERSAL::isa($@,'c4::InvalidRequestException') ){ 
        $result->{ire} = $@;
      }
      $output->writeMessageBegin('Save', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
}

sub process_Load {
      my ($self, $seqid, $input, $output) = @_;
      my $args = new c4::C4Admin_Load_args();
      $args->read($input);
      $input->readMessageEnd();
      my $result = new c4::C4Admin_Load_result();
      eval {
        $self->{handler}->Load($args->inputStream);
      }; if( UNIVERSAL::isa($@,'c4::InvalidRequestException') ){ 
        $result->{ire} = $@;
      }
      $output->writeMessageBegin('Load', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
}

sub process_Shutdown {
      my ($self, $seqid, $input, $output) = @_;
      my $args = new c4::C4Admin_Shutdown_args();
      $args->read($input);
      $input->readMessageEnd();
      $self->{handler}->Shutdown();
      return;
}
1;
