// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package C4Service

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type C4 interface {
	// Inserts or updates a new row including the corresponding column with a new value
	// 
	// 
	// Parameters:
	//  - RowId
	//  - ColumnId
	//  - Value
	//  - Ttl
	InsertOrUpdate(rowId TRowKey, columnId TColumnKey, value TValue, ttl TTTL) (ire *InvalidRequestException, err error)
	// Gets a column in a row
	// 
	// Parameters:
	//  - RowId
	//  - ColumnId
	Get(rowId TRowKey, columnId TColumnKey) (r TValue, ire *InvalidRequestException, err error)
	// Tombstones a column in a row. Tomestones are finally deleted in the next compaction.
	// 
	// Parameters:
	//  - RowId
	//  - ColumnId
	TombstoneColumn(rowId TRowKey, columnId TColumnKey) (ire *InvalidRequestException, err error)
	// Tombstones a row. Tomestones are finally deleted in the next compaction.
	// 
	// Parameters:
	//  - RowId
	TombstoneRow(rowId TRowKey) (ire *InvalidRequestException, err error)
}

type C4Client struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewC4ClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *C4Client {
	return &C4Client{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewC4ClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *C4Client {
	return &C4Client{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Inserts or updates a new row including the corresponding column with a new value
// 
// 
// Parameters:
//  - RowId
//  - ColumnId
//  - Value
//  - Ttl
func (p *C4Client) InsertOrUpdate(rowId TRowKey, columnId TColumnKey, value TValue, ttl TTTL) (ire *InvalidRequestException, err error) {
	if err = p.sendInsertOrUpdate(rowId, columnId, value, ttl); err != nil {
		return
	}
	return p.recvInsertOrUpdate()
}

func (p *C4Client) sendInsertOrUpdate(rowId TRowKey, columnId TColumnKey, value TValue, ttl TTTL) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("InsertOrUpdate", thrift.CALL, p.SeqId)
	args0 := NewInsertOrUpdateArgs()
	args0.RowId = rowId
	args0.ColumnId = columnId
	args0.Value = value
	args0.Ttl = ttl
	err = args0.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4Client) recvInsertOrUpdate() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1 := NewInsertOrUpdateResult()
	err = result1.Read(iprot)
	iprot.ReadMessageEnd()
	if result1.Ire != nil {
		ire = result1.Ire
	}
	return
}

// Gets a column in a row
// 
// Parameters:
//  - RowId
//  - ColumnId
func (p *C4Client) Get(rowId TRowKey, columnId TColumnKey) (r TValue, ire *InvalidRequestException, err error) {
	if err = p.sendGet(rowId, columnId); err != nil {
		return
	}
	return p.recvGet()
}

func (p *C4Client) sendGet(rowId TRowKey, columnId TColumnKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("Get", thrift.CALL, p.SeqId)
	args4 := NewGetArgs()
	args4.RowId = rowId
	args4.ColumnId = columnId
	err = args4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4Client) recvGet() (value TValue, ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result5 := NewGetResult()
	err = result5.Read(iprot)
	iprot.ReadMessageEnd()
	value = result5.Success
	if result5.Ire != nil {
		ire = result5.Ire
	}
	return
}

// Tombstones a column in a row. Tomestones are finally deleted in the next compaction.
// 
// Parameters:
//  - RowId
//  - ColumnId
func (p *C4Client) TombstoneColumn(rowId TRowKey, columnId TColumnKey) (ire *InvalidRequestException, err error) {
	if err = p.sendTombstoneColumn(rowId, columnId); err != nil {
		return
	}
	return p.recvTombstoneColumn()
}

func (p *C4Client) sendTombstoneColumn(rowId TRowKey, columnId TColumnKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("TombstoneColumn", thrift.CALL, p.SeqId)
	args8 := NewTombstoneColumnArgs()
	args8.RowId = rowId
	args8.ColumnId = columnId
	err = args8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4Client) recvTombstoneColumn() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result9 := NewTombstoneColumnResult()
	err = result9.Read(iprot)
	iprot.ReadMessageEnd()
	if result9.Ire != nil {
		ire = result9.Ire
	}
	return
}

// Tombstones a row. Tomestones are finally deleted in the next compaction.
// 
// Parameters:
//  - RowId
func (p *C4Client) TombstoneRow(rowId TRowKey) (ire *InvalidRequestException, err error) {
	if err = p.sendTombstoneRow(rowId); err != nil {
		return
	}
	return p.recvTombstoneRow()
}

func (p *C4Client) sendTombstoneRow(rowId TRowKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("TombstoneRow", thrift.CALL, p.SeqId)
	args12 := NewTombstoneRowArgs()
	args12.RowId = rowId
	err = args12.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *C4Client) recvTombstoneRow() (ire *InvalidRequestException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result13 := NewTombstoneRowResult()
	err = result13.Read(iprot)
	iprot.ReadMessageEnd()
	if result13.Ire != nil {
		ire = result13.Ire
	}
	return
}

type C4Processor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      C4
}

func (p *C4Processor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *C4Processor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *C4Processor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewC4Processor(handler C4) *C4Processor {

	self16 := &C4Processor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self16.processorMap["InsertOrUpdate"] = &c4ProcessorInsertOrUpdate{handler: handler}
	self16.processorMap["Get"] = &c4ProcessorGet{handler: handler}
	self16.processorMap["TombstoneColumn"] = &c4ProcessorTombstoneColumn{handler: handler}
	self16.processorMap["TombstoneRow"] = &c4ProcessorTombstoneRow{handler: handler}
	return self16
}

func (p *C4Processor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x17.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x17

}

type c4ProcessorInsertOrUpdate struct {
	handler C4
}

func (p *c4ProcessorInsertOrUpdate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewInsertOrUpdateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InsertOrUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewInsertOrUpdateResult()
	if result.Ire, err = p.handler.InsertOrUpdate(args.RowId, args.ColumnId, args.Value, args.Ttl); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertOrUpdate: "+err.Error())
		oprot.WriteMessageBegin("InsertOrUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("InsertOrUpdate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4ProcessorGet struct {
	handler C4
}

func (p *c4ProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResult()
	if result.Success, result.Ire, err = p.handler.Get(args.RowId, args.ColumnId); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Get: "+err.Error())
		oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("Get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4ProcessorTombstoneColumn struct {
	handler C4
}

func (p *c4ProcessorTombstoneColumn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTombstoneColumnArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TombstoneColumn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTombstoneColumnResult()
	if result.Ire, err = p.handler.TombstoneColumn(args.RowId, args.ColumnId); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TombstoneColumn: "+err.Error())
		oprot.WriteMessageBegin("TombstoneColumn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("TombstoneColumn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type c4ProcessorTombstoneRow struct {
	handler C4
}

func (p *c4ProcessorTombstoneRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTombstoneRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TombstoneRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTombstoneRowResult()
	if result.Ire, err = p.handler.TombstoneRow(args.RowId); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TombstoneRow: "+err.Error())
		oprot.WriteMessageBegin("TombstoneRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("TombstoneRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type InsertOrUpdateArgs struct {
	RowId    TRowKey    `thrift:"rowId,1,required"`
	ColumnId TColumnKey `thrift:"columnId,2,required"`
	Value    TValue     `thrift:"value,3,required"`
	Ttl      TTTL       `thrift:"ttl,4,required"`
}

func NewInsertOrUpdateArgs() *InsertOrUpdateArgs {
	return &InsertOrUpdateArgs{
		Ttl: 0,
	}
}

func (p *InsertOrUpdateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InsertOrUpdateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RowId = TRowKey(v)
	}
	return nil
}

func (p *InsertOrUpdateArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ColumnId = TColumnKey(v)
	}
	return nil
}

func (p *InsertOrUpdateArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = TValue(v)
	}
	return nil
}

func (p *InsertOrUpdateArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Ttl = TTTL(v)
	}
	return nil
}

func (p *InsertOrUpdateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InsertOrUpdate_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *InsertOrUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rowId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RowId)); err != nil {
		return fmt.Errorf("%T.rowId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rowId: %s", p, err)
	}
	return err
}

func (p *InsertOrUpdateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnId", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnId: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.ColumnId)); err != nil {
		return fmt.Errorf("%T.columnId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnId: %s", p, err)
	}
	return err
}

func (p *InsertOrUpdateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if err := oprot.WriteFieldBegin("value", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *InsertOrUpdateArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ttl: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Ttl)); err != nil {
		return fmt.Errorf("%T.ttl (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ttl: %s", p, err)
	}
	return err
}

func (p *InsertOrUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertOrUpdateArgs(%+v)", *p)
}

type InsertOrUpdateResult struct {
	Ire *InvalidRequestException `thrift:"ire,1"`
}

func NewInsertOrUpdateResult() *InsertOrUpdateResult {
	return &InsertOrUpdateResult{}
}

func (p *InsertOrUpdateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InsertOrUpdateResult) readField1(iprot thrift.TProtocol) error {
	p.Ire = NewInvalidRequestException()
	if err := p.Ire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ire)
	}
	return nil
}

func (p *InsertOrUpdateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InsertOrUpdate_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ire != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *InsertOrUpdateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ire != nil {
		if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ire: %s", p, err)
		}
		if err := p.Ire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ire)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ire: %s", p, err)
		}
	}
	return err
}

func (p *InsertOrUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertOrUpdateResult(%+v)", *p)
}

type GetArgs struct {
	RowId    TRowKey    `thrift:"rowId,1,required"`
	ColumnId TColumnKey `thrift:"columnId,2,required"`
}

func NewGetArgs() *GetArgs {
	return &GetArgs{}
}

func (p *GetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RowId = TRowKey(v)
	}
	return nil
}

func (p *GetArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ColumnId = TColumnKey(v)
	}
	return nil
}

func (p *GetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Get_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rowId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RowId)); err != nil {
		return fmt.Errorf("%T.rowId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rowId: %s", p, err)
	}
	return err
}

func (p *GetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnId", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnId: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.ColumnId)); err != nil {
		return fmt.Errorf("%T.columnId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnId: %s", p, err)
	}
	return err
}

func (p *GetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetArgs(%+v)", *p)
}

type GetResult struct {
	Success TValue                   `thrift:"success,0"`
	Ire     *InvalidRequestException `thrift:"ire,1"`
}

func NewGetResult() *GetResult {
	return &GetResult{}
}

func (p *GetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = TValue(v)
	}
	return nil
}

func (p *GetResult) readField1(iprot thrift.TProtocol) error {
	p.Ire = NewInvalidRequestException()
	if err := p.Ire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ire)
	}
	return nil
}

func (p *GetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Get_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ire != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.BINARY, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ire != nil {
		if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ire: %s", p, err)
		}
		if err := p.Ire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ire)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ire: %s", p, err)
		}
	}
	return err
}

func (p *GetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResult(%+v)", *p)
}

type TombstoneColumnArgs struct {
	RowId    TRowKey    `thrift:"rowId,1,required"`
	ColumnId TColumnKey `thrift:"columnId,2,required"`
}

func NewTombstoneColumnArgs() *TombstoneColumnArgs {
	return &TombstoneColumnArgs{}
}

func (p *TombstoneColumnArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TombstoneColumnArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RowId = TRowKey(v)
	}
	return nil
}

func (p *TombstoneColumnArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ColumnId = TColumnKey(v)
	}
	return nil
}

func (p *TombstoneColumnArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TombstoneColumn_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TombstoneColumnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rowId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RowId)); err != nil {
		return fmt.Errorf("%T.rowId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rowId: %s", p, err)
	}
	return err
}

func (p *TombstoneColumnArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnId", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnId: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.ColumnId)); err != nil {
		return fmt.Errorf("%T.columnId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnId: %s", p, err)
	}
	return err
}

func (p *TombstoneColumnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TombstoneColumnArgs(%+v)", *p)
}

type TombstoneColumnResult struct {
	Ire *InvalidRequestException `thrift:"ire,1"`
}

func NewTombstoneColumnResult() *TombstoneColumnResult {
	return &TombstoneColumnResult{}
}

func (p *TombstoneColumnResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TombstoneColumnResult) readField1(iprot thrift.TProtocol) error {
	p.Ire = NewInvalidRequestException()
	if err := p.Ire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ire)
	}
	return nil
}

func (p *TombstoneColumnResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TombstoneColumn_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ire != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TombstoneColumnResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ire != nil {
		if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ire: %s", p, err)
		}
		if err := p.Ire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ire)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ire: %s", p, err)
		}
	}
	return err
}

func (p *TombstoneColumnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TombstoneColumnResult(%+v)", *p)
}

type TombstoneRowArgs struct {
	RowId TRowKey `thrift:"rowId,1,required"`
}

func NewTombstoneRowArgs() *TombstoneRowArgs {
	return &TombstoneRowArgs{}
}

func (p *TombstoneRowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TombstoneRowArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RowId = TRowKey(v)
	}
	return nil
}

func (p *TombstoneRowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TombstoneRow_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TombstoneRowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rowId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RowId)); err != nil {
		return fmt.Errorf("%T.rowId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rowId: %s", p, err)
	}
	return err
}

func (p *TombstoneRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TombstoneRowArgs(%+v)", *p)
}

type TombstoneRowResult struct {
	Ire *InvalidRequestException `thrift:"ire,1"`
}

func NewTombstoneRowResult() *TombstoneRowResult {
	return &TombstoneRowResult{}
}

func (p *TombstoneRowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TombstoneRowResult) readField1(iprot thrift.TProtocol) error {
	p.Ire = NewInvalidRequestException()
	if err := p.Ire.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ire)
	}
	return nil
}

func (p *TombstoneRowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TombstoneRow_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ire != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TombstoneRowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ire != nil {
		if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ire: %s", p, err)
		}
		if err := p.Ire.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ire)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ire: %s", p, err)
		}
	}
	return err
}

func (p *TombstoneRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TombstoneRowResult(%+v)", *p)
}
